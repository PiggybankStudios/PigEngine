{
	"folders":
	[
		{
			"path": ".",
			"folder_exclude_patterns": [
				"engine",
				"lib",
				"build/Floragram.pdx",
			],
			"file_exclude_patterns": [
				"*.ilk",
				"*.exp",
				"*.elf",
			],
		},
		{
			"name": "PigEngine (Playdate)",
			"path": "engine/platform/playdate",
		},
		{
			"name": "GyLib",
			"path": "lib/include/gylib",
		},
		{
			"path": "F:\\Programs\\PlaydateSDK",
			"folder_exclude_patterns":
			[
				".sentry-native",
				"bin",
				"Designing for Playdate",
				"Disk",
				"Inside Playdate",
				"PlaydateSDK.docset",
				"resources",
				"C_API/buildsupport",
				"C_API/Examples",
				"CoreLibs/assets",
			],
			"file_exclude_patterns":
			[
				"*.html",
				"*.css",
			],
		},
	],
	"settings":
	{
		"build_options":
		[
		],
		"custom_constants":
		[
			"ASCII_TREE_CHILD_COUNT",
			"ASCII_TREE_FIRST_CHAR",
			"ATTR_PACKED",
			"AllocAlignment_16Bytes",
			"AllocAlignment_4Bytes",
			"AllocAlignment_64Bytes",
			"AllocAlignment_8Bytes",
			"AllocAlignment_Max",
			"AllocAlignment_None",
			"AppStateChangeType_Change",
			"AppStateChangeType_None",
			"AppStateChangeType_NumTypes",
			"AppStateChangeType_Pop",
			"AppStateChangeType_Push",
			"AppState_Game",
			"AppState_MainMenu",
			"AppState_None",
			"AppState_NumStates",
			"Basis_Default",
			"Black",
			"Black_Value",
			"Box_Zero",
			"Boxi_Zero",
			"Btn_A",
			"Btn_B",
			"Btn_CrankCcw",
			"Btn_CrankCw",
			"Btn_CrankDock",
			"Btn_Down",
			"Btn_Left",
			"Btn_None",
			"Btn_NumButtons",
			"Btn_Right",
			"Btn_Up",
			"BufferedSocketBufferType_None",
			"BufferedSocketBufferType_NumTypes",
			"BufferedSocketBufferType_Routing",
			"BufferedSocketBufferType_Rx",
			"BufferedSocketBufferType_Tx",
			"CRANK_BTN_DEADZONE",
			"CRANK_DELTA_DEADZONE",
			"CyclicFunc2D_Default",
			"CyclicFunc2D_NormalCosine",
			"CyclicFunc2D_NormalSaw",
			"CyclicFunc2D_NormalSine",
			"CyclicFunc2D_NormalSquare",
			"CyclicFunc2D_NormalTangent",
			"CyclicFuncType_Constant",
			"CyclicFuncType_Cosine",
			"CyclicFuncType_Custom",
			"CyclicFuncType_None",
			"CyclicFuncType_NumTypes",
			"CyclicFuncType_Saw",
			"CyclicFuncType_Sine",
			"CyclicFuncType_Square",
			"CyclicFuncType_Tangent",
			"CyclicFunc_Default",
			"CyclicFunc_NormalCosine",
			"CyclicFunc_NormalSaw",
			"CyclicFunc_NormalSine",
			"CyclicFunc_NormalSquare",
			"CyclicFunc_NormalTangent",
			"DBG_FILEPATH_AND_FUNCNAME_SEP_CHAR",
			"DEBUG_FONT_PATH",
			"DEBUG_OUTPUT_DELAY",
			"DEBUG_OUTPUT_ENABLED",
			"DEFAULT_HTTPS_PORT",
			"DEFAULT_HTTP_PORT",
			"DEFAULT_PROCESS_LOG_FIFO_SIZE",
			"DODECAHEDRON_DIHEDRAL_ANGLE32",
			"DODECAHEDRON_DIHEDRAL_ANGLE64",
			"DODECAHEDRON_NUM_EDGES",
			"DODECAHEDRON_NUM_FACES",
			"DODECAHEDRON_NUM_VERTICES",
			"DayOfWeek_Friday",
			"DayOfWeek_Monday",
			"DayOfWeek_NumDays",
			"DayOfWeek_Saturday",
			"DayOfWeek_Sunday",
			"DayOfWeek_Thursday",
			"DayOfWeek_Tuesday",
			"DayOfWeek_Wednesday",
			"DbgFlag_GyLib",
			"DbgFlag_Inverted",
			"DbgFlag_New",
			"DbgFlag_TaskThread",
			"DbgFlag_UserInput",
			"DbgFlags_None",
			"DbgLevel_Debug",
			"DbgLevel_Error",
			"DbgLevel_Info",
			"DbgLevel_None",
			"DbgLevel_Notify",
			"DbgLevel_NumLevels",
			"DbgLevel_Other",
			"DbgLevel_Regular",
			"DbgLevel_Warning",
			"ERROR_OUTPUT_ENABLED",
			"EXPORT",
			"EXTERN_C_END",
			"EXTERN_C_START",
			"EasingStyle_BackIn",
			"EasingStyle_BackInOut",
			"EasingStyle_BackOut",
			"EasingStyle_BounceIn",
			"EasingStyle_BounceInOut",
			"EasingStyle_BounceOut",
			"EasingStyle_CircularIn",
			"EasingStyle_CircularInOut",
			"EasingStyle_CircularOut",
			"EasingStyle_CubicIn",
			"EasingStyle_CubicInOut",
			"EasingStyle_CubicOut",
			"EasingStyle_EarlyInOut",
			"EasingStyle_ElasticIn",
			"EasingStyle_ElasticInOut",
			"EasingStyle_ElasticOut",
			"EasingStyle_ExponentialIn",
			"EasingStyle_ExponentialInOut",
			"EasingStyle_ExponentialOut",
			"EasingStyle_Linear",
			"EasingStyle_None",
			"EasingStyle_NumStyles",
			"EasingStyle_QuadraticIn",
			"EasingStyle_QuadraticInOut",
			"EasingStyle_QuadraticOut",
			"EasingStyle_QuarticIn",
			"EasingStyle_QuarticInOut",
			"EasingStyle_QuarticOut",
			"EasingStyle_QuinticIn",
			"EasingStyle_QuinticInOut",
			"EasingStyle_QuinticOut",
			"EasingStyle_SineIn",
			"EasingStyle_SineInOut",
			"EasingStyle_SineOut",
			"FIFO_DYNAMIC_CHUNK_SIZE",
			"FIRST_APP_STATE",
			"FIXED_HEAP_SIZE",
			"FNV_HASH_BASE_U64",
			"FNV_HASH_PRIME_U64",
			"FONT_RANGE_CHARS_WIDTH",
			"FREQUENCY_A0",
			"FREQUENCY_A1",
			"FREQUENCY_A2",
			"FREQUENCY_A3",
			"FREQUENCY_A4",
			"FREQUENCY_A5",
			"FREQUENCY_A6",
			"FREQUENCY_A7",
			"FREQUENCY_A8",
			"FREQUENCY_Ab0",
			"FREQUENCY_Ab1",
			"FREQUENCY_Ab2",
			"FREQUENCY_Ab3",
			"FREQUENCY_Ab4",
			"FREQUENCY_Ab5",
			"FREQUENCY_Ab6",
			"FREQUENCY_Ab7",
			"FREQUENCY_Ab8",
			"FREQUENCY_B0",
			"FREQUENCY_B1",
			"FREQUENCY_B2",
			"FREQUENCY_B3",
			"FREQUENCY_B4",
			"FREQUENCY_B5",
			"FREQUENCY_B6",
			"FREQUENCY_B7",
			"FREQUENCY_B8",
			"FREQUENCY_Bb0",
			"FREQUENCY_Bb1",
			"FREQUENCY_Bb2",
			"FREQUENCY_Bb3",
			"FREQUENCY_Bb4",
			"FREQUENCY_Bb5",
			"FREQUENCY_Bb6",
			"FREQUENCY_Bb7",
			"FREQUENCY_Bb8",
			"FREQUENCY_C0",
			"FREQUENCY_C1",
			"FREQUENCY_C2",
			"FREQUENCY_C3",
			"FREQUENCY_C4",
			"FREQUENCY_C5",
			"FREQUENCY_C6",
			"FREQUENCY_C7",
			"FREQUENCY_C8",
			"FREQUENCY_D0",
			"FREQUENCY_D1",
			"FREQUENCY_D2",
			"FREQUENCY_D3",
			"FREQUENCY_D4",
			"FREQUENCY_D5",
			"FREQUENCY_D6",
			"FREQUENCY_D7",
			"FREQUENCY_D8",
			"FREQUENCY_Db0",
			"FREQUENCY_Db1",
			"FREQUENCY_Db2",
			"FREQUENCY_Db3",
			"FREQUENCY_Db4",
			"FREQUENCY_Db5",
			"FREQUENCY_Db6",
			"FREQUENCY_Db7",
			"FREQUENCY_Db8",
			"FREQUENCY_E0",
			"FREQUENCY_E1",
			"FREQUENCY_E2",
			"FREQUENCY_E3",
			"FREQUENCY_E4",
			"FREQUENCY_E5",
			"FREQUENCY_E6",
			"FREQUENCY_E7",
			"FREQUENCY_E8",
			"FREQUENCY_Eb0",
			"FREQUENCY_Eb1",
			"FREQUENCY_Eb2",
			"FREQUENCY_Eb3",
			"FREQUENCY_Eb4",
			"FREQUENCY_Eb5",
			"FREQUENCY_Eb6",
			"FREQUENCY_Eb7",
			"FREQUENCY_Eb8",
			"FREQUENCY_F0",
			"FREQUENCY_F1",
			"FREQUENCY_F2",
			"FREQUENCY_F3",
			"FREQUENCY_F4",
			"FREQUENCY_F5",
			"FREQUENCY_F6",
			"FREQUENCY_F7",
			"FREQUENCY_F8",
			"FREQUENCY_G0",
			"FREQUENCY_G1",
			"FREQUENCY_G2",
			"FREQUENCY_G3",
			"FREQUENCY_G4",
			"FREQUENCY_G5",
			"FREQUENCY_G6",
			"FREQUENCY_G7",
			"FREQUENCY_G8",
			"FREQUENCY_Gb0",
			"FREQUENCY_Gb1",
			"FREQUENCY_Gb2",
			"FREQUENCY_Gb3",
			"FREQUENCY_Gb4",
			"FREQUENCY_Gb5",
			"FREQUENCY_Gb6",
			"FREQUENCY_Gb7",
			"FREQUENCY_Gb8",
			"FREQUENCY_MIDDLE_C",
			"FifoType_Dynamic",
			"FifoType_NumTypes",
			"FifoType_StaticDrop",
			"FifoType_StaticOverwrite",
			"FontRange_AsciiSyntax",
			"FontRange_Hiragana",
			"FontRange_HiraganaMarked",
			"FontRange_HiraganaSmall",
			"FontRange_Katakana",
			"FontRange_KatakanaMarked",
			"FontRange_KatakanaSmall",
			"FontRange_Lowercase",
			"FontRange_None",
			"FontRange_NumRanges",
			"FontRange_Numbers",
			"FontRange_Punctuation",
			"FontRange_Space",
			"FontRange_Uppercase",
			"FontRanges_ASCII",
			"FontRanges_All",
			"FontRanges_Alphabet",
			"FontRanges_English",
			"FontRanges_Japanese",
			"GAME_VERSION_BUILD",
			"GAME_VERSION_MAJOR",
			"GAME_VERSION_MINOR",
			"GYLIB_ASSERTIONS_ENABLED",
			"GYLIB_DEFAULT_RANDOM_SERIES_TYPE",
			"GYLIB_LOOKUP_PRIMES_10",
			"GYLIB_MEM_ARENA_DEBUG_ENABLED",
			"GYLIB_SCRATCH_ARENA_AVAILABLE",
			"GYLIB_TEMP_MEMORY_STATIC",
			"GYLIB_USE_ASSERT_FAILURE_FUNC",
			"GY_MAX_FLOAT_PARSE_LENGTH",
			"GY_WASM_STD_LIB",
			"Grey1",
			"Grey10",
			"Grey10_Value",
			"Grey11",
			"Grey11_Value",
			"Grey12",
			"Grey12_Value",
			"Grey13",
			"Grey13_Value",
			"Grey14",
			"Grey14_Value",
			"Grey1_Value",
			"Grey2",
			"Grey2_Value",
			"Grey3",
			"Grey3_Value",
			"Grey4",
			"Grey4_Value",
			"Grey5",
			"Grey5_Value",
			"Grey6",
			"Grey6_Value",
			"Grey7",
			"Grey7_Value",
			"Grey8",
			"Grey8_Value",
			"Grey9",
			"Grey9_Value",
			"HEXAGON_INNER_ANGLE32",
			"HEXAGON_INNER_ANGLE64",
			"HEXAGON_INNER_ANGLE_DEGREES",
			"HEXAGON_NUM_EDGES",
			"HEXAGON_NUM_VERTICES",
			"HalfPi32",
			"HalfPi64",
			"IMPORT",
			"INFO_OUTPUT_ENABLED",
			"IPADDRESS_MAX_STR_LENGTH",
			"IPV4_MAX_STR_LENGTH",
			"IPV4_NUM_PARTS",
			"IPV4_PART_SIZE",
			"IPV4_SEP_CHAR",
			"IPV6_MAX_STR_LENGTH",
			"IPV6_NUM_PARTS",
			"IPV6_PART_SIZE",
			"IPV6_SEP_CHAR",
			"IP_PORT_RANGE_COMMON_SERVICES_END",
			"IP_PORT_RANGE_COMMON_SERVICES_START",
			"IP_PORT_RANGE_DYNAMIC_END",
			"IP_PORT_RANGE_DYNAMIC_START",
			"IP_PORT_RANGE_REGISTERED_END",
			"IP_PORT_RANGE_REGISTERED_START",
			"IpAddress_LocalHost",
			"IpAddress_Zero",
			"LINUX_COMPILATION",
			"MAIN_HEAP_MAX_NUM_PAGES",
			"MAIN_HEAP_MAX_SIZE",
			"MAIN_HEAP_PAGE_SIZE",
			"MAX_DAYS_IN_MONTH",
			"MAX_EXECUTABLE_PATH_LENGTH",
			"MAX_JOINED_SERIALIZABLES",
			"MAX_NUM_APP_STATE_CHANGE_REQUESTS",
			"MAX_NUM_OFFSCREEN_BITMAPS",
			"MAX_NUM_OFFSCREEN_DIRTY_RECS",
			"MAX_NUM_PERF_TIMERS",
			"MAX_SOUND_INSTANCES",
			"Mat4_Identity",
			"Matrix4x4_Identity",
			"MemArenaType_Alias",
			"MemArenaType_Buffer",
			"MemArenaType_FixedHeap",
			"MemArenaType_MarkedStack",
			"MemArenaType_None",
			"MemArenaType_PagedHeap",
			"MemArenaType_PagedStack",
			"MemArenaType_Redirect",
			"MemArenaType_StdHeap",
			"MemArenaType_VirtualStack",
			"MonokaiBack",
			"MonokaiBack_Value",
			"MonokaiBlue",
			"MonokaiBlue_Value",
			"MonokaiBrown",
			"MonokaiBrown_Value",
			"MonokaiDarkGray",
			"MonokaiDarkGray_Value",
			"MonokaiDarkGreen",
			"MonokaiDarkGreen_Value",
			"MonokaiFadedYellow",
			"MonokaiFadedYellow_Value",
			"MonokaiGray1",
			"MonokaiGray1_Value",
			"MonokaiGray2",
			"MonokaiGray2_Value",
			"MonokaiGreen",
			"MonokaiGreen_Value",
			"MonokaiLightBlue",
			"MonokaiLightBlue_Value",
			"MonokaiLightGray",
			"MonokaiLightGray_Value",
			"MonokaiLightPurple",
			"MonokaiLightPurple_Value",
			"MonokaiLightRed",
			"MonokaiLightRed_Value",
			"MonokaiLightYellow",
			"MonokaiLightYellow_Value",
			"MonokaiMagenta",
			"MonokaiMagenta_Value",
			"MonokaiOrange",
			"MonokaiOrange_Value",
			"MonokaiPurple",
			"MonokaiPurple_Value",
			"MonokaiRed",
			"MonokaiRed_Value",
			"MonokaiWhite",
			"MonokaiWhite_Value",
			"MonokaiYellow",
			"MonokaiYellow_Value",
			"Month_April",
			"Month_August",
			"Month_December",
			"Month_February",
			"Month_January",
			"Month_July",
			"Month_June",
			"Month_March",
			"Month_May",
			"Month_November",
			"Month_NumMonths",
			"Month_October",
			"Month_September",
			"MyStr_Empty",
			"MyStr_Empty_Const",
			"NETWORK_BUS_ATTN_STR",
			"NETWORK_BUS_ATTN_STR_LENGTH",
			"NETWORK_BUS_CLIENT_TO_SERVER_BASE_CMD",
			"NETWORK_BUS_CONNECT_CMD_TIMEOUT",
			"NETWORK_BUS_DEFAULT_MAX_NUM_TRIES",
			"NETWORK_BUS_INCOMPLETE_CMD_TIMEOUT",
			"NETWORK_BUS_RESERVED_BASE_CMD",
			"NETWORK_BUS_RETRY_DELAY",
			"NETWORK_BUS_SERVER_TO_CLIENT_BASE_CMD",
			"NETWORK_BUS_UNRESERVED_BASE_CMD",
			"NOTIFY_OUTPUT_ENABLED",
			"NUM_DAYS_PER_4YEARS",
			"NUM_DAYS_PER_WEEK",
			"NUM_DAYS_PER_YEAR",
			"NUM_HOUR_PER_DAY",
			"NUM_LETTERS_IN_ENGLISH_ALPHABET",
			"NUM_MIN_PER_DAY",
			"NUM_MIN_PER_HOUR",
			"NUM_MIN_PER_WEEK",
			"NUM_MIN_PER_YEAR",
			"NUM_MS_PER_DAY",
			"NUM_MS_PER_HOUR",
			"NUM_MS_PER_MINUTE",
			"NUM_MS_PER_SECOND",
			"NUM_MS_PER_WEEK",
			"NUM_MS_PER_YEAR",
			"NUM_PREDEF_GREYSCALE_COLORS",
			"NUM_PREDEF_MONOKAI_COLORS",
			"NUM_PREDEF_PAL_COLORS",
			"NUM_PREDEF_PURE_COLORS",
			"NUM_SCRATCH_ARENAS_PER_THREAD",
			"NUM_SEC_PER_DAY",
			"NUM_SEC_PER_HOUR",
			"NUM_SEC_PER_MINUTE",
			"NUM_SEC_PER_WEEK",
			"NUM_SEC_PER_YEAR",
			"NUM_US_PER_DAY",
			"NUM_US_PER_HOUR",
			"NUM_US_PER_MINUTE",
			"NUM_US_PER_MS",
			"NUM_US_PER_SECOND",
			"NbPacketHandleFlags_All",
			"NbPacketHandleFlags_NbInternal",
			"NbPacketHandleFlags_None",
			"NbPacketHandleFlags_RetryPacket",
			"NetworkBusCmd_Ack",
			"NetworkBusCmd_Disconnect",
			"NetworkBusCmd_Failure",
			"NetworkBusCmd_Last",
			"NetworkBusCmd_NewClient",
			"NetworkBusCmd_None",
			"NetworkBusCmd_Ping",
			"NetworkBusCmd_Success",
			"NetworkBusRsp_Ack",
			"NetworkBusRsp_Failure",
			"NetworkBusRsp_IdAssigned",
			"NetworkBusRsp_Kicked",
			"NetworkBusRsp_Last",
			"NetworkBusRsp_None",
			"NetworkBusRsp_Ping",
			"NetworkBusRsp_Success",
			"NetworkBusState_Connected",
			"NetworkBusState_Disconnected",
			"NetworkBusState_JustOpened",
			"NetworkBusState_None",
			"NetworkBusState_NumStates",
			"NetworkBusState_WaitingForClientId",
			"NoColor",
			"NoColor_Value",
			"OFFSCREEN_BITMAP_HEIGHT",
			"OFFSCREEN_BITMAP_WIDTH",
			"ORCA_COMPILATION",
			"OSX_COMPILATION",
			"OTHER_OUTPUT_ENABLED",
			"Obb2_Zero",
			"OsError_EmptyPath",
			"OsError_ExePathTooLong",
			"OsError_FailedToAllocateMemory",
			"OsError_None",
			"OsError_NumErrors",
			"OsError_UnsupportedPlatform",
			"PENTAGON_ANGLE_STEP32",
			"PENTAGON_ANGLE_STEP64",
			"PENTAGON_INTERNAL_ANGLE32",
			"PENTAGON_INTERNAL_ANGLE64",
			"PENTAGON_NUM_EDGES",
			"PENTAGON_NUM_VERTICES",
			"PERF_FORMAT",
			"PERF_FORMAT_STR",
			"PERF_GRAPH_DISPLAY_HEIGHT",
			"PERF_GRAPH_FONT_PATH",
			"PERF_GRAPH_WIDTH",
			"PERF_TICK_WIDTH",
			"PIG_VERSION_BUILD",
			"PIG_VERSION_MAJOR",
			"PIG_VERSION_MINOR",
			"PLATFORM_32BIT",
			"PLATFORM_64BIT",
			"PLAYDATE_COMPILATION",
			"PLAYDATE_DEVICE",
			"PLAYDATE_SCREEN_HEIGHT",
			"PLAYDATE_SCREEN_WIDTH",
			"PLAYDATE_SIMULATOR",
			"PalBackground",
			"PalBackgroundDark",
			"PalBackgroundDark_Value",
			"PalBackgroundDarker",
			"PalBackgroundDarker_Value",
			"PalBackgroundLight",
			"PalBackgroundLight_Value",
			"PalBackgroundLighter",
			"PalBackgroundLighter_Value",
			"PalBackground_Value",
			"PalBanana",
			"PalBananaDark",
			"PalBananaDark_Value",
			"PalBananaDarker",
			"PalBananaDarker_Value",
			"PalBananaLight",
			"PalBananaLight_Value",
			"PalBananaLighter",
			"PalBananaLighter_Value",
			"PalBanana_Value",
			"PalBlack",
			"PalBlackDark",
			"PalBlackDark_Value",
			"PalBlackDarker",
			"PalBlackDarker_Value",
			"PalBlackLight",
			"PalBlackLight_Value",
			"PalBlackLighter",
			"PalBlackLighter_Value",
			"PalBlack_Value",
			"PalBlue",
			"PalBlueDark",
			"PalBlueDark_Value",
			"PalBlueDarker",
			"PalBlueDarker_Value",
			"PalBlueLight",
			"PalBlueLight_Value",
			"PalBlueLighter",
			"PalBlueLighter_Value",
			"PalBlue_Value",
			"PalGrass",
			"PalGrassDark",
			"PalGrassDark_Value",
			"PalGrassDarker",
			"PalGrassDarker_Value",
			"PalGrassLight",
			"PalGrassLight_Value",
			"PalGrassLighter",
			"PalGrassLighter_Value",
			"PalGrass_Value",
			"PalGreen",
			"PalGreenDark",
			"PalGreenDark_Value",
			"PalGreenDarker",
			"PalGreenDarker_Value",
			"PalGreenLight",
			"PalGreenLight_Value",
			"PalGreenLighter",
			"PalGreenLighter_Value",
			"PalGreen_Value",
			"PalGrey",
			"PalGreyDark",
			"PalGreyDark_Value",
			"PalGreyDarker",
			"PalGreyDarker_Value",
			"PalGreyLight",
			"PalGreyLight_Value",
			"PalGreyLighter",
			"PalGreyLighter_Value",
			"PalGrey_Value",
			"PalHoney",
			"PalHoneyDark",
			"PalHoneyDark_Value",
			"PalHoneyDarker",
			"PalHoneyDarker_Value",
			"PalHoneyLight",
			"PalHoneyLight_Value",
			"PalHoneyLighter",
			"PalHoneyLighter_Value",
			"PalHoney_Value",
			"PalNeutral",
			"PalNeutralDark",
			"PalNeutralDark_Value",
			"PalNeutralDarker",
			"PalNeutralDarker_Value",
			"PalNeutralLight",
			"PalNeutralLight_Value",
			"PalNeutralLighter",
			"PalNeutralLighter_Value",
			"PalNeutral_Value",
			"PalOrange",
			"PalOrangeDark",
			"PalOrangeDark_Value",
			"PalOrangeDarker",
			"PalOrangeDarker_Value",
			"PalOrangeLight",
			"PalOrangeLight_Value",
			"PalOrangeLighter",
			"PalOrangeLighter_Value",
			"PalOrange_Value",
			"PalPink",
			"PalPinkDark",
			"PalPinkDark_Value",
			"PalPinkDarker",
			"PalPinkDarker_Value",
			"PalPinkLight",
			"PalPinkLight_Value",
			"PalPinkLighter",
			"PalPinkLighter_Value",
			"PalPink_Value",
			"PalPurple",
			"PalPurpleDark",
			"PalPurpleDark_Value",
			"PalPurpleDarker",
			"PalPurpleDarker_Value",
			"PalPurpleLight",
			"PalPurpleLight_Value",
			"PalPurpleLighter",
			"PalPurpleLighter_Value",
			"PalPurple_Value",
			"PalRed",
			"PalRedDark",
			"PalRedDark_Value",
			"PalRedDarker",
			"PalRedDarker_Value",
			"PalRedLight",
			"PalRedLight_Value",
			"PalRedLighter",
			"PalRedLighter_Value",
			"PalRed_Value",
			"PalSky",
			"PalSkyDark",
			"PalSkyDark_Value",
			"PalSkyDarker",
			"PalSkyDarker_Value",
			"PalSkyLight",
			"PalSkyLight_Value",
			"PalSkyLighter",
			"PalSkyLighter_Value",
			"PalSky_Value",
			"PalViolet",
			"PalVioletDark",
			"PalVioletDark_Value",
			"PalVioletDarker",
			"PalVioletDarker_Value",
			"PalVioletLight",
			"PalVioletLight_Value",
			"PalVioletLighter",
			"PalVioletLighter_Value",
			"PalViolet_Value",
			"PalYellow",
			"PalYellowDark",
			"PalYellowDark_Value",
			"PalYellowDarker",
			"PalYellowDarker_Value",
			"PalYellowLight",
			"PalYellowLight_Value",
			"PalYellowLighter",
			"PalYellowLighter_Value",
			"PalYellow_Value",
			"ParsingTokenType_Comment",
			"ParsingTokenType_FilePrefix",
			"ParsingTokenType_KeyValuePair",
			"ParsingTokenType_NumTypes",
			"ParsingTokenType_Unknown",
			"Pi32",
			"Pi64",
			"PrimeNumbersU32_Count",
			"PureBlue",
			"PureBlue_Value",
			"PureGreen",
			"PureGreen_Value",
			"PureOrange",
			"PureOrange_Value",
			"PurePurple",
			"PurePurple_Value",
			"PureRed",
			"PureRed_Value",
			"PureYellow",
			"PureYellow_Value",
			"QuarterPi32",
			"QuarterPi64",
			"Quat_Identity",
			"RAND_FLOAT_PRECISION_R32",
			"RAND_FLOAT_PRECISION_R64",
			"REFRESH_RATE",
			"REGULAR_OUTPUT_ENABLED",
			"RESOURCE_MANIFEST_FILE_PREFIX",
			"RESOURCE_MANIFEST_FILE_PREFIX_LENGTH",
			"RandomSeriesType_Fixed",
			"RandomSeriesType_Incremental",
			"RandomSeriesType_LinearCongruential32",
			"RandomSeriesType_LinearCongruential64",
			"RandomSeriesType_NumTypes",
			"Range_Empty",
			"Range_One",
			"Rangei_Empty",
			"Rangei_One",
			"Rec_Default",
			"Rec_Zero",
			"Reci_Zero",
			"ResponseCheckResult_Failure",
			"ResponseCheckResult_NA",
			"ResponseCheckResult_NumResults",
			"ResponseCheckResult_Success",
			"SCRATCH_ARENA_MAX_NUM_MARKS",
			"SCRATCH_ARENA_SIZE",
			"Serializable_Empty",
			"SocketError_CreationBindFailed",
			"SocketError_CreationFailed",
			"SocketError_CreationNonBlockingFailed",
			"SocketError_Generic",
			"SocketError_None",
			"SocketError_NumErrors",
			"SocketError_ReadError",
			"SocketError_WriteError",
			"SocketProtocol_None",
			"SocketProtocol_NumProtocols",
			"SocketProtocol_Tcp",
			"SocketProtocol_Udp",
			"SocketType_MultiDestination",
			"SocketType_None",
			"SocketType_NumTypes",
			"SocketType_SingleDestination",
			"SocketWarning_BufferIsFull",
			"SocketWarning_None",
			"SocketWarning_NumWarnings",
			"SocketWarning_TooManyDestAddresses",
			"SocketWarning_TooManySourceAddresses",
			"Sqrt2_32",
			"Sqrt2_64",
			"TARGET_FRAMERATE",
			"TARGET_FRAME_TIME",
			"TEMP_STRING_LENGTH",
			"TIME_SCALE_SNAP_PERCENT",
			"ThirdPi32",
			"ThirdPi64",
			"ThreeHalfsPi32",
			"ThreeHalfsPi64",
			"TimeUnit_Days",
			"TimeUnit_Hours",
			"TimeUnit_Milliseconds",
			"TimeUnit_Minutes",
			"TimeUnit_Months",
			"TimeUnit_NumUnits",
			"TimeUnit_Seconds",
			"TimeUnit_Years",
			"Transparent",
			"TransparentBlack",
			"TransparentBlack_Value",
			"TransparentWhite",
			"TransparentWhite_Value",
			"Transparent_Value",
			"TryDeserResourceManifestError_EmptyFile",
			"TryDeserResourceManifestError_InvalidOrMissingHeader",
			"TryDeserResourceManifestError_None",
			"TryDeserResourceManifestError_NumErrors",
			"TryParseFailureReason_CharactersAfterParenthesis",
			"TryParseFailureReason_FloatParseFailure",
			"TryParseFailureReason_Infinity",
			"TryParseFailureReason_InvalidCharacter",
			"TryParseFailureReason_InvalidType",
			"TryParseFailureReason_InvalidUtf8",
			"TryParseFailureReason_MismatchedParenthesis",
			"TryParseFailureReason_NoNumbers",
			"TryParseFailureReason_None",
			"TryParseFailureReason_NotEnoughCommas",
			"TryParseFailureReason_Nullptr",
			"TryParseFailureReason_NumReasons",
			"TryParseFailureReason_Overflow",
			"TryParseFailureReason_StringOverflow",
			"TryParseFailureReason_TooLong",
			"TryParseFailureReason_TooManyCommas",
			"TryParseFailureReason_TooShort",
			"TryParseFailureReason_Underflow",
			"TryParseFailureReason_UnknownString",
			"TryParseFailureReason_WrongNumCharacters",
			"TwoPi32",
			"TwoPi64",
			"UNICODE_CYRILLIC_COUNT",
			"UNICODE_CYRILLIC_END",
			"UNICODE_CYRILLIC_START",
			"UNICODE_HIRAGANA_COUNT",
			"UNICODE_HIRAGANA_END",
			"UNICODE_HIRAGANA_START",
			"UNICODE_KATAKANA_COUNT",
			"UNICODE_KATAKANA_END",
			"UNICODE_KATAKANA_START",
			"UNICODE_LATIN_EXT_COUNT",
			"UNICODE_LATIN_EXT_END",
			"UNICODE_LATIN_EXT_START",
			"UNIX_EPOCH_DATE",
			"UNKNOWN_CHAR_CODEPOINT",
			"UNKNOWN_CHAR_STR",
			"UTF8_MAX_CHAR_SIZE",
			"UTF8_MAX_CODEPOINT",
			"UUID_BYTE_LENGTH",
			"UUID_STR_LENGTH",
			"UUID_STR_LENGTH_NO_HYPHENS",
			"Uuid_Full",
			"Uuid_Zero",
			"Vec2_Down",
			"Vec2_Half",
			"Vec2_Left",
			"Vec2_One",
			"Vec2_Right",
			"Vec2_Up",
			"Vec2_Zero",
			"Vec2i_Down",
			"Vec2i_Left",
			"Vec2i_One",
			"Vec2i_Right",
			"Vec2i_Up",
			"Vec2i_Zero",
			"Vec3_Back",
			"Vec3_Backward",
			"Vec3_Bottom",
			"Vec3_Down",
			"Vec3_Forward",
			"Vec3_Front",
			"Vec3_Half",
			"Vec3_Left",
			"Vec3_One",
			"Vec3_Right",
			"Vec3_Top",
			"Vec3_Up",
			"Vec3_Zero",
			"Vec3i_Back",
			"Vec3i_Backward",
			"Vec3i_Bottom",
			"Vec3i_Down",
			"Vec3i_Forward",
			"Vec3i_Front",
			"Vec3i_Left",
			"Vec3i_One",
			"Vec3i_Right",
			"Vec3i_Top",
			"Vec3i_Up",
			"Vec3i_Zero",
			"Vec4_Back",
			"Vec4_Backward",
			"Vec4_Bottom",
			"Vec4_Down",
			"Vec4_Forward",
			"Vec4_Front",
			"Vec4_Half",
			"Vec4_Left",
			"Vec4_Nextward",
			"Vec4_One",
			"Vec4_Prevward",
			"Vec4_Right",
			"Vec4_Top",
			"Vec4_Up",
			"Vec4_Zero",
			"Vec4i_Back",
			"Vec4i_Backward",
			"Vec4i_Bottom",
			"Vec4i_Down",
			"Vec4i_Forward",
			"Vec4i_Front",
			"Vec4i_Left",
			"Vec4i_Nextward",
			"Vec4i_One",
			"Vec4i_Prevward",
			"Vec4i_Right",
			"Vec4i_Top",
			"Vec4i_Up",
			"Vec4i_Zero",
			"WARNING_OUTPUT_ENABLED",
			"WASM_COMPILATION",
			"WINDOWS_COMPILATION",
			"WORD_TREE_CHILD_COUNT",
			"WORD_TREE_FIRST_CHAR",
			"White",
			"White_Value",
			"WordBreakCharClass_AlphabeticLower",
			"WordBreakCharClass_AlphabeticUpper",
			"WordBreakCharClass_NumClasses",
			"WordBreakCharClass_Numeric",
			"WordBreakCharClass_Other",
			"WordBreakCharClass_Punctuation",
			"WordBreakCharClass_PunctuationClose",
			"WordBreakCharClass_PunctuationOpen",
			"WordBreakCharClass_Whitespace",
			"WordBreakCharClass_WordPunctuation",
			"XmlParseResultType_Comment",
			"XmlParseResultType_Contents",
			"XmlParseResultType_Directive",
			"XmlParseResultType_EndToken",
			"XmlParseResultType_Error",
			"XmlParseResultType_None",
			"XmlParseResultType_NumTypes",
			"XmlParseResultType_Token",
			"XmlParsingError_ClosingTokenMismatch",
			"XmlParsingError_ExpectedClosingAngleBracket",
			"XmlParsingError_InvalidCharInIdentifier",
			"XmlParsingError_InvalidCharacterOutsideToken",
			"XmlParsingError_InvalidPropertyFirstChar",
			"XmlParsingError_InvalidUtf8",
			"XmlParsingError_MissingClosingTokens",
			"XmlParsingError_MissingPropertyValue",
			"XmlParsingError_NoEqualsForProperty",
			"XmlParsingError_NoTypeFoundForToken",
			"XmlParsingError_None",
			"XmlParsingError_NumErrors",
			"XmlParsingError_UnexpectedClosingToken",
			"XmlParsingError_UnexpectedEol",
			"__func__",
			"e32",
			"e64",
		],
		"custom_functions":
		[
			"#define AllocArray(arena, structName, numItems)",
			"#define AllocBytes(arena, numBytes)",
			"#define AllocChars(arena, numBytes)",
			"#define AllocString(arena, strPntr)",
			"#define AllocStruct(arena, structName)",
			"#define ArenaDelete(type, pntr, arena)",
			"#define ArenaNew(type, pntrToAssign, arena, ...)",
			"#define ArrayCount(Array)",
			"#define Assert(Expression)",
			"#define AssertIf(Precondition, Expression)",
			"#define AssertIfMsg(Precondition, Expression, message)",
			"#define AssertIfMsg_(Precondition, Expression, message)",
			"#define AssertIf_(Precondition, Expression)",
			"#define AssertMsg(Expression, message)",
			"#define AssertMsg_(Expression, message)",
			"#define AssertNullTerm(strPntr)",
			"#define AssertNullTerm_(strPntr)",
			"#define Assert_(Expression)",
			"#define BOOL_FUNC_DEF(functionName)",
			"#define BinDeser_IsMemberPresent(structSize, type, memberName)",
			"#define BinDeser_ReadBytes(dataPntr, dataSize, byteIndexPntr, numBytes)",
			"#define BinDeser_ReadI16(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI32(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI64(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadI8(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadStruct(dataPntr, dataSize, byteIndexPntr, type)",
			"#define BinDeser_ReadStructDynamicSize(dataPntr, dataSize, byteIndexPntr, structSizeOut, type, sizeMemberName, firstOptionalMemberName)",
			"#define BinDeser_ReadU16(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU32(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU64(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinDeser_ReadU8(dataPntr, dataSize, byteIndexPntr, variableOut)",
			"#define BinSer_WriteBytes(result, resultSize, byteIndexPntr, numBytes, bytesPntr)",
			"#define BinSer_WriteI16(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI32(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI64(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteI8(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteStructure(result, resultSize, byteIndexPntr, type)",
			"#define BinSer_WriteU16(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU32(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU64(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteU8(result, resultSize, byteIndexPntr, value)",
			"#define BinSer_WriteValue(result, resultSize, byteIndexPntr, type, value)",
			"#define BktArrayAdd(array, type)",
			"#define BktArrayAddBulk(array, type, numItems, mustBeConsecutive)",
			"#define BktArrayGet(array, type, index)",
			"#define BktArrayGetHard(array, type, index)",
			"#define BktArrayGetSoft(array, type, index)",
			"#define COMPARE_FUNC_DEFINITION(functionName)",
			"#define ClearArray(Array)",
			"#define ClearPointer(Pointer)",
			"#define ClearStruct(Structure)",
			"#define CompileAssert(condition)",
			"#define CompileAssertMsg(condition, message)",
			"#define CreateLinkedList(list, memArena, type)",
			"#define CreateStackBufferArena(arenaName, bufferName, size)",
			"#define Cube(value)",
			"#define DebugAssert(Expression)",
			"#define DebugAssertAndUnused(Expression, unusedVarInRelease)",
			"#define DebugAssertAndUnusedMsg(Expression, unusedVarInRelease, message)",
			"#define DebugAssertAndUnusedMsg_(Expression, unusedVarInRelease, message)",
			"#define DebugAssertAndUnused_(Expression, unusedVarInRelease)",
			"#define DebugAssertMsg(Expression, message)",
			"#define DebugAssertMsg_(Expression, message)",
			"#define DebugAssert_(Expression)",
			"#define Decrement(variable)",
			"#define DecrementBy(variable, amount)",
			"#define END_PACK()",
			"#define EXPORT(returnType, functionName, ...)",
			"#define FlagEnumSet(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumSetTo(BitwiseField, Bit, condition, enumType, castType)",
			"#define FlagEnumToggle(BitwiseField, Bit, enumType, castType)",
			"#define FlagEnumUnset(BitwiseField, Bit, enumType, castType)",
			"#define FlagSet(BitwiseField, Bit)",
			"#define FlagSetTo(BitwiseField, Bit, condition)",
			"#define FlagToggle(BitwiseField, Bit)",
			"#define FlagUnset(BitwiseField, Bit)",
			"#define FlipEndianU32(variable)",
			"#define FreeBufferArena(bufferArena, sourceArena)",
			"#define FreeString(arena, strPntr)",
			"#define GYLIB_DEBUG_OUTPUT_HANDLER_DEF(functionName)",
			"#define GYLIB_DEBUG_PRINT_HANDLER_DEF(functionName)",
			"#define GYLIB_GET_TEMP_ARENA_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_AFTER_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_BEFORE_CALLBACK_DEF(functionName)",
			"#define GY_STRING_FIFO_PUSH_LINES_SORT_CALLBACK_DEF(functionName)",
			"#define GetFifoLineMetaStruct(linePntr, type)",
			"#define Gigabytes(value)",
			"#define GyLibPrintAt(level, formatString, ...)",
			"#define GyLibPrintLineAt(level, formatString, ...)",
			"#define GyLibPrintLine_D(formatString, ...)",
			"#define GyLibPrintLine_E(formatString, ...)",
			"#define GyLibPrintLine_I(formatString, ...)",
			"#define GyLibPrintLine_N(formatString, ...)",
			"#define GyLibPrintLine_O(formatString, ...)",
			"#define GyLibPrintLine_R(formatString, ...)",
			"#define GyLibPrintLine_W(formatString, ...)",
			"#define GyLibPrint_D(formatString, ...)",
			"#define GyLibPrint_E(formatString, ...)",
			"#define GyLibPrint_I(formatString, ...)",
			"#define GyLibPrint_N(formatString, ...)",
			"#define GyLibPrint_O(formatString, ...)",
			"#define GyLibPrint_R(formatString, ...)",
			"#define GyLibPrint_W(formatString, ...)",
			"#define GyLibWriteAt(level, message)",
			"#define GyLibWriteLineAt(level, message)",
			"#define GyLibWriteLine_D(message)",
			"#define GyLibWriteLine_E(message)",
			"#define GyLibWriteLine_I(message)",
			"#define GyLibWriteLine_N(message)",
			"#define GyLibWriteLine_O(message)",
			"#define GyLibWriteLine_R(message)",
			"#define GyLibWriteLine_W(message)",
			"#define GyLibWrite_D(message)",
			"#define GyLibWrite_E(message)",
			"#define GyLibWrite_I(message)",
			"#define GyLibWrite_N(message)",
			"#define GyLibWrite_O(message)",
			"#define GyLibWrite_R(message)",
			"#define GyLibWrite_W(message)",
			"#define HardFreeMem(arena, allocPntr)",
			"#define HardReallocMem(arena, allocPntr, newSize)",
			"#define I32_FUNC_DEF(functionName)",
			"#define IMPORT(returnType, functionName, ...)",
			"#define IS_VAR_IN_X_BYTES_OF_STRUCT(structureName, numBytes, variableName)",
			"#define InPlaceNew(type, pntrToClass, ...)",
			"#define Increment(variable, max)",
			"#define IncrementBy(variable, amount, max)",
			"#define IncrementU16(variable)",
			"#define IncrementU16By(variable, amount)",
			"#define IncrementU32(variable)",
			"#define IncrementU32By(variable, amount)",
			"#define IncrementU64(variable)",
			"#define IncrementU64By(variable, amount)",
			"#define IncrementU8(variable)",
			"#define IncrementU8By(variable, amount)",
			"#define IsAllocPrefixFilled(packedSize)",
			"#define IsEqualXor(variable1, variable2, condition1, condition2)",
			"#define IsFlagSet(BitwiseField, Bit)",
			"#define IsPntrWithin(regionStart, regionSize, pntr)",
			"#define IsSizedPntrWithin(regionStart, regionSize, pntr, size)",
			"#define IsVersionAbove(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define IsVersionBelow(versionMajor, versionMinor, numberMajor, numberMinor)",
			"#define Kilobytes(value)",
			"#define LinkedListAdd(list, type)",
			"#define LinkedListClear(list, type)",
			"#define LinkedListFirst(list, type)",
			"#define LinkedListGet(list, type, index)",
			"#define LinkedListInsert(list, type, index)",
			"#define LinkedListLast(list, type)",
			"#define LinkedListNext(list, type, itemPntr)",
			"#define LinkedListPrev(list, type, itemPntr)",
			"#define LinkedListRemove(list, type, itemPntr)",
			"#define LinkedListUnlist(list, type, itemPntr)",
			"#define LogExitFailure(log, errorCode)",
			"#define LogExitSuccess(log)",
			"#define LogPrintAt(log, level, formatString, ...)",
			"#define LogPrintAtx(log, level, flags, formatString, ...)",
			"#define LogPrintLineAt(log, level, formatString, ...)",
			"#define LogPrintLineAtx(log, level, flags, formatString, ...)",
			"#define LogPrintLine_D(log, formatString, ...)",
			"#define LogPrintLine_Dx(log, flags, formatString, ...)",
			"#define LogPrintLine_E(log, formatString, ...)",
			"#define LogPrintLine_Ex(log, flags, formatString, ...)",
			"#define LogPrintLine_I(log, formatString, ...)",
			"#define LogPrintLine_Ix(log, flags, formatString, ...)",
			"#define LogPrintLine_N(log, formatString, ...)",
			"#define LogPrintLine_Nx(log, flags, formatString, ...)",
			"#define LogPrintLine_O(log, formatString, ...)",
			"#define LogPrintLine_Ox(log, flags, formatString, ...)",
			"#define LogPrintLine_R(log, formatString, ...)",
			"#define LogPrintLine_Rx(log, flags, formatString, ...)",
			"#define LogPrintLine_W(log, formatString, ...)",
			"#define LogPrintLine_Wx(log, flags, formatString, ...)",
			"#define LogPrint_D(log, formatString, ...)",
			"#define LogPrint_Dx(log, flags, formatString, ...)",
			"#define LogPrint_E(log, formatString, ...)",
			"#define LogPrint_Ex(log, flags, formatString, ...)",
			"#define LogPrint_I(log, formatString, ...)",
			"#define LogPrint_Ix(log, flags, formatString, ...)",
			"#define LogPrint_N(log, formatString, ...)",
			"#define LogPrint_Nx(log, flags, formatString, ...)",
			"#define LogPrint_O(log, formatString, ...)",
			"#define LogPrint_Ox(log, flags, formatString, ...)",
			"#define LogPrint_R(log, formatString, ...)",
			"#define LogPrint_Rx(log, flags, formatString, ...)",
			"#define LogPrint_W(log, formatString, ...)",
			"#define LogPrint_Wx(log, flags, formatString, ...)",
			"#define LogWriteAt(log, level, message)",
			"#define LogWriteAtx(log, level, flags, message)",
			"#define LogWriteLineAt(log, level, message)",
			"#define LogWriteLineAtx(log, level, flags, message)",
			"#define LogWriteLine_D(log, message)",
			"#define LogWriteLine_Dx(log, flags, message)",
			"#define LogWriteLine_E(log, message)",
			"#define LogWriteLine_Ex(log, flags, message)",
			"#define LogWriteLine_I(log, message)",
			"#define LogWriteLine_Ix(log, flags, message)",
			"#define LogWriteLine_N(log, message)",
			"#define LogWriteLine_Nx(log, flags, message)",
			"#define LogWriteLine_O(log, message)",
			"#define LogWriteLine_Ox(log, flags, message)",
			"#define LogWriteLine_R(log, message)",
			"#define LogWriteLine_Rx(log, flags, message)",
			"#define LogWriteLine_W(log, message)",
			"#define LogWriteLine_Wx(log, flags, message)",
			"#define LogWrite_D(log, message)",
			"#define LogWrite_Dx(log, flags, message)",
			"#define LogWrite_E(log, message)",
			"#define LogWrite_Ex(log, flags, message)",
			"#define LogWrite_I(log, message)",
			"#define LogWrite_Ix(log, flags, message)",
			"#define LogWrite_N(log, message)",
			"#define LogWrite_Nx(log, flags, message)",
			"#define LogWrite_O(log, message)",
			"#define LogWrite_Ox(log, flags, message)",
			"#define LogWrite_R(log, message)",
			"#define LogWrite_Rx(log, flags, message)",
			"#define LogWrite_W(log, message)",
			"#define LogWrite_Wx(log, flags, message)",
			"#define Mat3Determinant(a, b, c, d, e, f, g, h, i)",
			"#define Mat4ApplyLeft(matrix, transformation)",
			"#define Mat4Transform(matrix, transformation)",
			"#define Megabytes(value)",
			"#define MyBreak()",
			"#define MyBreakEx(message)",
			"#define MyBufferPrintf(buffer, bufferSize, formatStr, ...)",
			"#define MyDebugBreak()",
			"#define MyFree(ptr)",
			"#define MyHostToNetworkByteOrderU16(integer)",
			"#define MyHostToNetworkByteOrderU32(integer)",
			"#define MyMalloc(numBytes)",
			"#define MyMemCompare(ptr1, ptr2, length)",
			"#define MyMemCopy(dest, source, length)",
			"#define MyMemMove(dest, source, length)",
			"#define MyMemSet(dest, value, length)",
			"#define MyNetworkToHostByteOrderU16(integer)",
			"#define MyNetworkToHostByteOrderU32(integer)",
			"#define MyRealloc(ptr, numBytes)",
			"#define MyStrCompare(str1, str2, length)",
			"#define MyStrCompareNt(str1, str2)",
			"#define MyStrCopyNt(dest, source)",
			"#define MyStrLength(str)",
			"#define MyStrLength32(str)",
			"#define MyStrLength64(str)",
			"#define MyStrStrNt(str1, str2)",
			"#define MyVaListPrintf(buffer, bufferSize, formatStr, vaList)",
			"#define MyWideStrLength(str)",
			"#define MyWideStrLength32(str)",
			"#define NewSerializable(funcs, structPntr)",
			"#define NewSerializableWithContext(funcs, structPntr, contextPntr)",
			"#define NewStringInArena(arena, length, charPntr)",
			"#define NewStringInArenaNt(arena, nullTermStr)",
			"#define NotEmptyStr(strPntr)",
			"#define NotEmptyStr_(strPntr)",
			"#define NotNull(variable)",
			"#define NotNull2(variable1, variable2)",
			"#define NotNull2Msg(variable1, variable2, message)",
			"#define NotNull2Msg_(variable1, variable2, message)",
			"#define NotNull2_(variable1, variable2)",
			"#define NotNull3(variable1, variable2, variable3)",
			"#define NotNull3Msg(variable1, variable2, variable3, message)",
			"#define NotNull3Msg_(variable1, variable2, variable3, message)",
			"#define NotNull3_(variable1, variable2, variable3)",
			"#define NotNull4(variable1, variable2, variable3, variable4)",
			"#define NotNull4Msg(variable1, variable2, variable3, variable4, message)",
			"#define NotNull4Msg_(variable1, variable2, variable3, variable4, message)",
			"#define NotNull4_(variable1, variable2, variable3, variable4)",
			"#define NotNullMsg(variable, message)",
			"#define NotNullMsg_(variable, message)",
			"#define NotNullStr(strPntr)",
			"#define NotNullStr_(strPntr)",
			"#define NotNull_(variable)",
			"#define OnesComplimentU32(variable)",
			"#define PACKED(class_to_pack)",
			"#define PackAllocPrefixSize(used, size)",
			"#define Plural(number, multipleSuffix)",
			"#define PluralEx(number, singularSuffix, multipleSuffix)",
			"#define PrintInArenaVa(arena, resultName, resultLengthName, formatString)",
			"#define PrintLineAt(dbgLevel, formatString, ...)",
			"#define PrintLineAtx(flags, dbgLevel, formatString, ...)",
			"#define PrintLine_D(formatString, ...)",
			"#define PrintLine_Dx(flags, formatString, ...)",
			"#define PrintLine_E(formatString, ...)",
			"#define PrintLine_Ex(flags, formatString, ...)",
			"#define PrintLine_I(formatString, ...)",
			"#define PrintLine_Ix(flags, formatString, ...)",
			"#define PrintLine_N(formatString, ...)",
			"#define PrintLine_Nx(flags, formatString, ...)",
			"#define PrintLine_O(formatString, ...)",
			"#define PrintLine_Ox(flags, formatString, ...)",
			"#define PrintLine_R(formatString, ...)",
			"#define PrintLine_Rx(flags, formatString, ...)",
			"#define PrintLine_W(formatString, ...)",
			"#define PrintLine_Wx(flags, formatString, ...)",
			"#define ReverseByteArray(array, size)",
			"#define START_PACK()",
			"#define STRUCT_VAR_END_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_OFFSET(structureName, variableName)",
			"#define STRUCT_VAR_SIZE(structureName, variableName)",
			"#define SWAP_POINTERS(varType, pntr1, pntr2)",
			"#define SWAP_VARIABLES(varType, var1, var2)",
			"#define SetOptionalOutPntr(outputPntr, value)",
			"#define SoftFreeMem(arena, allocPntr)",
			"#define SoftReallocMem(arena, allocPntr, newSize)",
			"#define Square(value)",
			"#define StrHashDictAdd(dict, key, type)",
			"#define StrHashDictAddEmpty(dict, key)",
			"#define StrHashDictAddEmptyHard(dict, key)",
			"#define StrHashDictAddEmptySoft(dict, key)",
			"#define StrHashDictAddHard(dict, key, type)",
			"#define StrHashDictAddSoft(dict, key, type)",
			"#define StrHashDictAddSoftEx(dict, key, isNewEntryOut, type)",
			"#define StrHashDictContains(dict, key, type)",
			"#define StrHashDictContainsEmpty(dict, key)",
			"#define StrHashDictGet(dict, key, type)",
			"#define StrHashDictGetHard(dict, key, type)",
			"#define StrHashDictGetIter(dict, type)",
			"#define StrHashDictGetSoft(dict, key, type)",
			"#define StrHashDictIter(iter, type, itemPntrOut)",
			"#define StrHashDictRemove(dict, key, type)",
			"#define StrHashDictRemoveEmpty(dict, key)",
			"#define StrHashDictRemoveEmptyHard(dict, key)",
			"#define StrHashDictRemoveEmptySoft(dict, key)",
			"#define StrHashDictRemoveHard(dict, key, type)",
			"#define StrHashDictRemoveSoft(dict, key, type)",
			"#define StrPntrPrint(myStrPntr)",
			"#define StrPrint(myStrStruct)",
			"#define TIME_SCALED_ANIM(animTimeMs, timeScale)",
			"#define TempArray(structName, numItems)",
			"#define TempBytes(numBytes)",
			"#define TempPopMark()",
			"#define TempPopMarkIf(condition)",
			"#define TempPopMarkNotArena(memArenaPntrThatMightBeTempArena)",
			"#define TempPrint(formatString, ...)",
			"#define TempPrintStr(formatString, ...)",
			"#define TempPrintVa(resultName, resultLengthName, formatString)",
			"#define TempPushMark()",
			"#define TempPushMarkIf(condition)",
			"#define TempPushMarkNotArena(memArenaPntrThatMightBeTempArena)",
			"#define TempStruct(structName)",
			"#define ThreadSafeClaimByBool(variablePntr)",
			"#define ThreadSafeIncrement(variablePntr)",
			"#define ThreadingReadBarrier()",
			"#define ThreadingWriteBarrier()",
			"#define ToDegrees32(radians)",
			"#define ToDegrees64(radians)",
			"#define ToRadians32(degrees)",
			"#define ToRadians64(degrees)",
			"#define TrackMax(isFirst, trackVariable, newValue)",
			"#define TrackMin(isFirst, trackVariable, newValue)",
			"#define UNREFERENCED(varName)",
			"#define UNUSED(varName)",
			"#define Unimplemented()",
			"#define Unimplemented_()",
			"#define UnpackAllocPrefixSize(packedSize)",
			"#define VOID_FUNC_DEF(functionName)",
			"#define VarArrayAdd(array, type)",
			"#define VarArrayAddRange(array, index, newItemsCount, type)",
			"#define VarArrayContains(array, itemPntr)",
			"#define VarArrayContainsTyped(array, itemPntr, type)",
			"#define VarArrayGet(array, index, type)",
			"#define VarArrayGetFirst(array, type)",
			"#define VarArrayGetFirstHard(array, type)",
			"#define VarArrayGetFirstSoft(array, type)",
			"#define VarArrayGetHard(array, index, type)",
			"#define VarArrayGetIndexOf(array, itemPntr, indexOutPntr, type)",
			"#define VarArrayGetLast(array, type)",
			"#define VarArrayGetLastHard(array, type)",
			"#define VarArrayGetLastSoft(array, type)",
			"#define VarArrayGetSoft(array, index, type)",
			"#define VarArrayInsert(array, index, type)",
			"#define VarArrayLoop(arrayPntr, indexName)",
			"#define VarArrayLoopGet(type, varName, arrayPntr, index)",
			"#define VarArrayMerge(destArray, sourceArray)",
			"#define VarArrayPop(array, type)",
			"#define VarArrayPopFront(array, type)",
			"#define VarArrayPush(array, type)",
			"#define VarArrayPushFront(array, type)",
			"#define VarArrayRemove(array, index, type)",
			"#define VarArrayRemoveByPntr(array, itemToRemove)",
			"#define VarArrayRemoveByPntrTyped(array, itemToRemove, type)",
			"#define VarArrayRemoveRange(array, index, numItemsToRemove, type)",
			"#define WriteLineAt(dbgLevel, message)",
			"#define WriteLineAtx(flags, dbgLevel, message)",
			"#define WriteLine_D(message)",
			"#define WriteLine_Dx(flags, message)",
			"#define WriteLine_E(message)",
			"#define WriteLine_Ex(flags, message)",
			"#define WriteLine_I(message)",
			"#define WriteLine_Ix(flags, message)",
			"#define WriteLine_N(message)",
			"#define WriteLine_Nx(flags, message)",
			"#define WriteLine_O(message)",
			"#define WriteLine_Ox(flags, message)",
			"#define WriteLine_R(message)",
			"#define WriteLine_Rx(flags, message)",
			"#define WriteLine_W(message)",
			"#define WriteLine_Wx(flags, message)",
			"AppState_t GetCurrentAppState()",
			"AppState_t InitGame()",
			"Basis_t BasisNormalize(Basis_t basis)",
			"Basis_t NewBasis(v3 right, v3 up, v3 forward, bool normalize = true)",
			"Basis_t NewBasisForwardUp(v3 forward, v3 up, bool normalize = true)",
			"Basis_t NewBasisRightUp(v3 right, v3 up, bool normalize = true)",
			"Basis_t QuatGetBasis(quat quaternion)",
			"Bezier3_t Bezier3Rotate(Bezier3_t curve, r32 rotation)",
			"Bezier3_t Bezier3RotateAround(Bezier3_t curve, r32 rotation, v2 rotationOrigin)",
			"Bezier3_t NewBezier3(v2 start, v2 control, v2 end)",
			"Bezier3_t ToBezier3(v2 startPos, BezierPathPart_t pathPart)",
			"Bezier4_t Bezier4Rotate(Bezier4_t curve, r32 rotation)",
			"Bezier4_t Bezier4RotateAround(Bezier4_t curve, r32 rotation, v2 rotationOrigin)",
			"Bezier4_t GetBezierCurveForQuarterCircle(v2 center, r32 radius, u8 dir = Dir2_Right|Dir2_Down)",
			"Bezier4_t NewBezier4(v2 start, v2 control1, v2 control2, v2 end)",
			"Bezier4_t ToBezier4(v2 startPos, BezierPathPart_t pathPart)",
			"BezierPathPart_t NewBezierPathPartCurve3(v2 control, v2 endPos)",
			"BezierPathPart_t NewBezierPathPartCurve4(v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t NewBezierPathPartLine(v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartCurve3(BezierPath_t* path, v2 control, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartCurve4(BezierPath_t* path, v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedCurve3(BezierPath_t* path, v2 startPos, v2 control, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedCurve4(BezierPath_t* path, v2 startPos, v2 control1, v2 control2, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartDetachedLine(BezierPath_t* path, v2 startPos, v2 endPos)",
			"BezierPathPart_t* AddBezierPathPartLine(BezierPath_t* path, v2 endPos)",
			"BitmapData_t GetBitmapData(LCDBitmap* bitmap, bool sizeOnly = false)",
			"BktArrayBucket_t* BktArrayGetLastUsedBucket(BktArray_t* array)",
			"BufferedSocketBuffer_t* FindBufferForAddress(BufferedSocket_t* socket, IpAddress_t address, BufferedSocketBufferType_t type = BufferedSocketBufferType_Rx, bool findFreeBufferIfNeeded = true)",
			"BufferedSocketBuffer_t* FindBufferForAddressAndPort(BufferedSocket_t* socket, IpAddressAndPort_t address, BufferedSocketBufferType_t type = BufferedSocketBufferType_Rx, bool findFreeBufferIfNeeded = true)",
			"Circle_t NewCircle(v2 center, r32 radius)",
			"ColorHSV_t ColorHSVFromRGB(Color_t color)",
			"ColorHSV_t NewColorHsv(r32 hue, r32 saturation, r32 value)",
			"ColorHSV_t ToColorHsv(v3 vector3)",
			"Color_t ColorComplementary(Color_t color)",
			"Color_t ColorComplementaryOld(Color_t color)",
			"Color_t ColorDarken(Color_t color, u8 amount)",
			"Color_t ColorDesaturate(Color_t color, r32 saturation)",
			"Color_t ColorLerp(Color_t start, Color_t end, r32 amount)",
			"Color_t ColorLighten(Color_t color, u8 amount)",
			"Color_t ColorMultiply(Color_t color1, Color_t color2)",
			"Color_t ColorMultiplyAlpha(Color_t color, u8 alphaValue)",
			"Color_t ColorMultiplyAlphaR32(Color_t color, r32 amount)",
			"Color_t ColorOpposite(Color_t color)",
			"Color_t ColorRGBFromHSV(ColorHSV_t colorHsv)",
			"Color_t ColorTransparent(Color_t color, r32 alpha)",
			"Color_t GetDbgLevelTextColor(DbgLevel_t dbgLevel)",
			"Color_t GetGreyscaleColorByIndex(u64 index)",
			"Color_t GetPredefPalColorByIndex(u64 index)",
			"Color_t GetPureColorByIndex(u64 index)",
			"Color_t NewColor(u8 r, u8 g, u8 b)",
			"Color_t ToColor(Colorf_t colorf)",
			"Colorf_t ColorfComplementary(Colorf_t color)",
			"Colorf_t ColorfDarken(Colorf_t color, r32 amount)",
			"Colorf_t ColorfDesaturate(Colorf_t color, r32 saturation)",
			"Colorf_t ColorfLerp(Colorf_t start, Colorf_t end, r32 amount)",
			"Colorf_t ColorfLighten(Colorf_t color, r32 amount)",
			"Colorf_t ColorfMultiply(Colorf_t color1, Colorf_t color2)",
			"Colorf_t ColorfMultiplyAlpha(Colorf_t color, r32 alphaValue)",
			"Colorf_t ColorfOpposite(Colorf_t color)",
			"Colorf_t NewColorf(r32 r, r32 g, r32 b)",
			"Colorf_t ToColorf(Color_t color)",
			"Cone_t NewCone(v3 base, r32 height, r32 radius)",
			"CyclicFunc2D_t NewCyclicFunc2D(CyclicFuncType_t type, v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DConstant(v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DCosine(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DCustom(CyclicFunc2DCallback_f* callback)",
			"CyclicFunc2D_t NewCyclicFunc2DSaw(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DSine(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DSquare(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc2D_t NewCyclicFunc2DTangent(v2 period, v2 amplitude, v2 offset, v2 constant)",
			"CyclicFunc_t NewCyclicFunc(CyclicFuncType_t type, r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncConstant(r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncCosine(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncCustom(CyclicFuncCallback_f* callback)",
			"CyclicFunc_t NewCyclicFuncSaw(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncSine(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncSquare(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"CyclicFunc_t NewCyclicFuncTangent(r32 period = 1.0f, r32 amplitude = 1.0f, r32 offset = 0.0f, r32 constant = 0.0f)",
			"Cylinder_t NewCylinder(v3 base, r32 height, r32 radius)",
			"Dodec_t NewDodec(v3 center, r32 sideLength, quat rotation)",
			"FilesInDir_t GetFilesInDirectory(MyStr_t path, MemArena_t* memArena, bool includeFolders = false, bool fileNameOnly = false, bool showHidden = false)",
			"FontRange_t FontRangeByIndex(u64 index)",
			"Font_t LoadFont(MyStr_t path)",
			"Font_t* PdBindFont(Font_t* font)",
			"Frustum_t NewFrustum(v3 origin, v3 direction, v3 upVector, v2 fov, r32 zNear, r32 zFar)",
			"Hexagon_t NewHexagon(v2 center, r32 radiusOrSideLength, r32 rotation = 0.0f)",
			"IpAddress4_t NewIpAddress4(u8 part0, u8 part1, u8 part2, u8 part3)",
			"IpAddress6_t NewIpAddress6(u16 part0, u16 part1, u16 part2, u16 part3, u16 part4, u16 part5, u16 part6, u16 part7)",
			"IpAddressAndPort_t NewIpAddress4AndPort(u8 part0, u8 part1, u8 part2, u8 part3, IpPort_t port)",
			"IpAddressAndPort_t NewIpAddress6AndPort(u16 part0, u16 part1, u16 part2, u16 part3, u16 part4, u16 part5, u16 part6, u16 part7, IpPort_t port)",
			"IpAddressAndPort_t NewIpAddressAndPort(IpAddress_t address, IpPort_t port)",
			"IpAddress_t NewIpAddress(u8 part0, u8 part1, u8 part2, u8 part3)",
			"LCDBitmapDrawMode PdSetDrawMode(LCDBitmapDrawMode drawMode)",
			"LineParser_t NewLineParser(MyStr_t fileContents)",
			"MemArena_t AllocBufferArena(MemArena_t* sourceArena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"MemArena_t* GetTempArena()",
			"MyStr_t CombineStrs(MemArena_t* memArena, MyStr_t str1, MyStr_t str2)",
			"MyStr_t ConvertUcs2StrToUtf8(MemArena_t* memArena, const wchar_t* wideStrPntr, u64 wideStrLength)",
			"MyStr_t ConvertUcs2StrToUtf8Nt(MemArena_t* memArena, const wchar_t* nullTermWideStr)",
			"MyStr_t FindStrParensPart(MyStr_t target, char openParensChar = '[', char closeParensChar = ']')",
			"MyStr_t FormatBytes(u64 numBytes, MemArena_t* memArena)",
			"MyStr_t FormatMilliseconds(u64 milliseconds, MemArena_t* memArena)",
			"MyStr_t FormatNumberWithCommas(u64 number, MemArena_t* memArena = nullptr)",
			"MyStr_t FormatRealTime(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t GetDirectoryPart(MyStr_t filePath)",
			"MyStr_t GetElapsedString(MemArena_t* memArena, u64 timespanInSecs)",
			"MyStr_t GetFifoLineMetaString(const StringFifoLine_t* line)",
			"MyStr_t GetFifoLineText(const StringFifoLine_t* line)",
			"MyStr_t GetFileNamePart(MyStr_t filePath, bool includeExtension = true)",
			"MyStr_t GetIpAddress4String(IpAddress4_t address, MemArena_t* memArena)",
			"MyStr_t GetIpAddress6String(IpAddress6_t address, MemArena_t* memArena)",
			"MyStr_t GetIpAddressString(IpAddress_t address, MemArena_t* memArena)",
			"MyStr_t GetUrlHostNamePart(MyStr_t* fullUrl)",
			"MyStr_t GetUrlPathPart(MyStr_t* fullUrl)",
			"MyStr_t NewStr(u64 length, char* pntr)",
			"MyStr_t NewStrLengthOnly(u64 length)",
			"MyStr_t OsGetExecutablePath(MemArena_t* memArena, OsError_t* errorOut)",
			"MyStr_t OsGetWorkingDirectory(MemArena_t* memArena, OsError_t* errorOut)",
			"MyStr_t PrintInArenaStr(MemArena_t* arena, const char* formatString, ...)",
			"MyStr_t SERIALIZE_FUNC_DEFINITION(u64 structSize, const void* structPntr, MemArena_t* memArena, void* contextPntr)",
			"MyStr_t Serialize(Serializable_t serializable, MemArena_t* memArena)",
			"MyStr_t Serialize_JoinedSerializable(u64 structSize, const void* structPntr, MemArena_t* memArena, void* contextPntr)",
			"MyStr_t SocketReadFromAnyStr(OpenSocket_t* socket, MemArena_t* memArena, u64 maxReadSize, IpAddressAndPort_t* addressOut = nullptr)",
			"MyStr_t SocketReadStr(OpenSocket_t* socket, MemArena_t* memArena, u64 maxReadSize)",
			"MyStr_t StrReplace(MyStr_t str, MyStr_t target, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSplice(MyStr_t target, u64 startIndex, u64 endIndex, MyStr_t replacement, MemArena_t* memArena)",
			"MyStr_t StrSubstring(MyStr_t* target, u64 startIndex, u64 endIndex)",
			"MyStr_t StrSubstringLength(MyStr_t* target, u64 startIndex, u64 length)",
			"MyStr_t StringBufferSubstring(StringBufferGeneric_t* stringBuffer, u64 startIndex, u64 endIndex = optional)",
			"MyStr_t StringBufferSubstringFromEnd(StringBufferGeneric_t* stringBuffer, u64 startIndexFromEnd)",
			"MyStr_t StringRepeat(MemArena_t* memArena, MyStr_t str, u64 numRepetitions)",
			"MyStr_t TakeString(StringBuilder_t* builder, MemArena_t* memArena = nullptr)",
			"MyStr_t TempFormatMilliseconds(u64 milliseconds)",
			"MyStr_t TempFormatRealTime(const RealTime_t* realTime, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"MyStr_t ToMyStr(StringBufferGeneric_t* stringBuffer)",
			"MyStr_t UnescapeQuotedStringInArena(MemArena_t* memArena, MyStr_t target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"MyStr_t UuidToStrArena(const Uuid_t* uuid, MemArena_t* memArena, bool addHyphens = true)",
			"MyStr_t* SplitString(MemArena_t* memArena, MyStr_t target, MyStr_t delineator, u64* numPiecesOut = nullptr, bool ignoreCase = false)",
			"MyWideStr_t ConvertUtf8StrToUcs2(MemArena_t* memArena, MyStr_t utf8Str)",
			"NetworkBusClient_t* FindNetworkBusClientByAddress(NetworkBus_t* bus, IpAddressAndPort_t address)",
			"NetworkBusClient_t* FindNetworkBusClientById(NetworkBus_t* bus, u64 clientId)",
			"OffscreenTarget_t GetOffscreenTarget(v2i neededSize, bool forceTopLeft = false)",
			"Pentagon_t NewPentagon(v2 center, r32 sideLength, r32 rotation = 0.0f)",
			"Plane_t NewPlane(v3 normal, r32 distance)",
			"PrimitiveIndex3D_t NewPrimitiveIndex3D(u64 index, u64 faceIndex, v3 normal, v2 texCoord)",
			"PrimitiveIndexedVerts_t GenerateVertsForBox(Box_t box, MemArena_t* memArena)",
			"PrimitiveIndexedVerts_t GenerateVertsForSphere(Sphere_t sphere, u64 numRings, u64 numSegments, bool smoothShading, MemArena_t* memArena)",
			"Pyramid_t NewPyramid(v3 base, r32 height, v2 baseSize)",
			"Range_t NewRange(r32 min, r32 max)",
			"Range_t RangeBoth(Range_t range1, Range_t range2)",
			"Range_t RangeOverlap(Range_t range1, Range_t range2)",
			"Range_t RangeScale(Range_t range, r32 scalar)",
			"Range_t RangeShift(Range_t range, r32 shiftAmount)",
			"Rangei_t RangeiBoth(Rangei_t range1, Rangei_t range2)",
			"Rangei_t RangeiOverlap(Rangei_t range1, Rangei_t range2)",
			"Rangei_t RangeiScale(Rangei_t range, i32 scalar)",
			"Rangei_t RangeiShift(Rangei_t range, i32 shiftAmount)",
			"Ray2_t NewRay2(v2 origin, v2 direction)",
			"Ray3_t NewRay3(v3 origin, v3 direction)",
			"ResourceManifestEntry_t* ResourceManifestAdd(ResourceManifest_t* manifest, MyStr_t path, bool allowDuplicates = false, bool caseSensitive = false, bool* addEntryOut = nullptr)",
			"ResourceManifestEntry_t* ResourceManifestFind(ResourceManifest_t* manifest, MyStr_t path, bool caseSensitive = false)",
			"Serializable_t NewJoinedSerializable(JoinedSerializableContext_t* contextStructPntr, Serializable_t serializable1, Serializable_t serializable2, Serializable_t serializable3 = {}, Serializable_t serializable4 = {})",
			"Serializable_t NewJoinedSerializableEmpty(JoinedSerializableContext_t* contextStructPntr)",
			"Serializable_t NewSerializable_(SerializableFuncs_t funcs, u64 structSize, void* structPntr, void* contextPntr = nullptr)",
			"Serializable_t NewSerializable_NetworkBusStandardPayload(NetworkBusStandardPayload_t* successOrFailurePayload)",
			"Simplex_t NewSimplex(v3 vert0, v3 vert1, v3 vert2, v3 vert3)",
			"SocketError_t CloseOpenSocketIfErrors(OpenSocket_t* socket, bool printOutError = false)",
			"SocketError_t DestroyBufferedSocketIfErrors(BufferedSocket_t* socket, bool printOutError = false)",
			"SocketError_t PrintSocketError(int errorCode, const char* message, const char* functionName)",
			"SoundInstance_t NewSoundInstance(Sound_t* source)",
			"SoundInstance_t* AllocSoundInstance(SoundPool_t* pool)",
			"SoundInstance_t* PlaySound(SoundPool_t* pool, Sound_t* source, r32 volume = 1.0f, int repeatCount = 1, r32 rate = 1.0f)",
			"SoundInstance_t* PlaySound(Sound_t* source, r32 volume = 1.0f, int repeatCount = 1, r32 rate = 1.0f)",
			"Sound_t LoadSound(MyStr_t path)",
			"Sphere_t NewSphere(v3 center, r32 radius)",
			"SpriteSheet_t LoadSpriteSheet(MyStr_t path, i32 numFramesX)",
			"StringBufferGeneric_t* ToGeneric(StringBuffer_t* stringBuffer)",
			"StringBuffer_t* ToStringBuffer(StringBufferGeneric_t* stringBuffer)",
			"StringFifoLine_t* StringFifoPushLine(StringFifo_t* fifo, MyStr_t text)",
			"StringFifoLine_t* StringFifoPushLineExt(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"TempString_t* ToTempString(StringBufferGeneric_t* stringBuffer)",
			"TextParser_t NewTextParser(MyStr_t fileContents)",
			"Texture_t CreateTexture(v2i size, u64 dataSize, const u8* pixelData, const u8* maskData = nullptr)",
			"Texture_t LoadTexture(MyStr_t path)",
			"Triangle2D_t NewTriangle2D(v2 vert0, v2 vert1, v2 vert2)",
			"Triangle3D_t NewTriangle3D(v3 vert0, v3 vert1, v3 vert2)",
			"TriangulateVert_t* GetNextTriangulateVert(TriangulateVert_t* vertices, u64 totalNumVertices, u64 startIndex)",
			"TriangulateVert_t* GetPrevTriangulateVert(TriangulateVert_t* vertices, u64 totalNumVertices, u64 startIndex)",
			"Tribool_t NB_RESPONSE_CHECK_DEFINITION(struct NetworkBus_t* bus, struct RetryPacket_t* packet, struct NetworkCmdHeader_t header, const u8* payloadPntr)",
			"Uuid_t NewUuid(u32 block0, u16 block1, u16 block2, u16 block3, u64 block4)",
			"Uuid_t ParseUuid(MyStr_t str)",
			"Vector2_t NewVec2(r32 x, r32 y)",
			"Vector2i_t NewVec2i(i32 x, i32 y)",
			"Vector3_t NewVec3(r32 x, r32 y, r32 z)",
			"Vector3i_t NewVec3i(i32 x, i32 y, i32 z)",
			"Vector4_t NewVec4(r32 x, r32 y, r32 z, r32 w)",
			"Vector4i_t NewVec4i(i32 x, i32 y, i32 z, i32 w)",
			"Wedge_t NewWedge(v3 bottomLeft, v3 size)",
			"WordBreakCharClass_t GetWordBreakCharClass(u32 codepoint)",
			"WordTreeLeaf_t* WordTreeAddLeaf(WordTree_t* tree, MyStr_t word)",
			"WordTreeLeaf_t* WordTreeAddPntr(WordTree_t* tree, MyStr_t word, void* valuePntr)",
			"WordTreeLeaf_t* WordTreeAddU64(WordTree_t* tree, MyStr_t word, u64 value64)",
			"WordTreeLeaf_t* WordTreeGetLeaf(WordTree_t* tree, MyStr_t word)",
			"WordTreeNode_t* WordTreeAddNode(WordTree_t* tree, WordTreeNode_t* node, char childChar, WordTreeLeaf_t** leafOut)",
			"XmlParser_t NewXmlParser(MemArena_t* arenaForLists, MyStr_t fileContents)",
			"XmlProperty_t* GetXmlProperty(XmlToken_t* token, MyStr_t propertyKey, bool ignoreCase = false)",
			"bool APP_STATE_IS_FULL_DEFINITION()",
			"bool AreBasisEqual(Basis_t left, Basis_t right, r32 tolerance = 0.001f)",
			"bool AreCharsHexidecimal(u64 numChars, char* charsPntr)",
			"bool AreSerializablesEqual(const Serializable_t left, const Serializable_t right)",
			"bool BasicallyEqualColorf(Colorf_t left, Colorf_t right, r32 tolerance = 0.001f)",
			"bool BinDeser_ReadVariable_(const void* dataPntr, u64 dataSize, u64* byteIndexPntr, u64 valueSize, void* valueOutPntr)",
			"bool BoxBasicallyEqual(box left, box right, r32 tolerance = 0.001f)",
			"bool BoxesIntersect(box boundingBox1, box boundingBox2, bool inclusive = true)",
			"bool BoxiEqual(boxi left, boxi right)",
			"bool BoxisIntersect(boxi boundingBox1, boxi boundingBox2, bool inclusive = true)",
			"bool BufferIsNullTerminated(u64 bufferSize, const char* bufferPntr)",
			"bool BufferedSocketWrite(BufferedSocket_t* socket, u64 dataSize, const void* dataPntr, u64* numBytesSentOut = nullptr)",
			"bool BufferedSocketWriteTo(BufferedSocket_t* socket, BufferedSocketBuffer_t* buffer, u64 dataSize, const void* dataPntr, u64* numBytesSentOut = nullptr)",
			"bool BufferedSocketWriteTo(BufferedSocket_t* socket, IpAddressAndPort_t destAddress, u64 dataSize, const void* dataPntr, u64* numBytesSentOut = nullptr)",
			"bool DESERIALIZE_FUNC_DEFINITION(MyStr_t serializedData, u64 structOutSize, void* structOutPntr, MemArena_t* memArena, void* contextPntr)",
			"bool DeleteFile(MyStr_t path)",
			"bool DeleteFolder(MyStr_t path)",
			"bool Deserialize(Serializable_t serializable, MyStr_t serializedData, MemArena_t* memArena = nullptr)",
			"bool Deserialize_JoinedSerializable(MyStr_t serializedData, u64 structOutSize, void* structOutPntr, MemArena_t* memArena, void* contextPntr)",
			"bool DoRangeisOverlap(Rangei_t range1, Rangei_t range2, bool inclusive = true)",
			"bool DoRangesOverlap(Range_t range1, Range_t range2, bool inclusive = true)",
			"bool DoesFileExist(bool fromDataDir, MyStr_t path)",
			"bool DoesMemArenaSupportFreeing(MemArena_t* arena)",
			"bool DoesMemArenaSupportPushAndPop(MemArena_t* arena)",
			"bool DoesRangeContain(Range_t range, r32 value, bool inclusiveMin = true, bool inclusiveMax = true)",
			"bool DoesRangeiContain(Rangei_t range, i32 value, bool inclusiveMin = true, bool inclusiveMax = true)",
			"bool DoesStrContainMultibyteUtf8Characters(MyStr_t str)",
			"bool FifoGetMulti(const Fifo_t* fifo, u64 numBytes, u8* arrayPntr)",
			"bool FifoPushMulti(Fifo_t* fifo, u64 arraySize, const u8* arrayPntr)",
			"bool FifoPushU8(Fifo_t* fifo, u8 newByte)",
			"bool FindNextCharInStr(MyStr_t target, u64 startIndex, MyStr_t searchCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextUnknownCharInStr(MyStr_t target, u64 startIndex, MyStr_t knownCharsStr, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindNextWhitespaceInStr(MyStr_t target, u64 startIndex, u64* indexOut = nullptr, bool ignoreCharsInQuotes = false)",
			"bool FindSubstring(MyStr_t target, MyStr_t substring, u64* indexOut = nullptr, bool ignoreCase = false, u64 startIndex = 0)",
			"bool FontHasRange(Font_t font, u16 range, bool partial = false)",
			"bool FreeMem(MemArena_t* arena, void* allocPntr, u64 allocSize = 0, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"bool GetEllipseArcCurveCenterAndAngles(v2 start, v2 radius, r32 axisAngle, u8 arcFlags, v2 end, v2* centerOut = nullptr, r32* startAngleOut = nullptr, r32* angleDeltaOut = nullptr)",
			"bool InitializeSockets()",
			"bool IsAlignedTo(const void* memoryPntr, AllocAlignment_t alignment)",
			"bool IsAppStateActive(AppState_t appState)",
			"bool IsAppStateInitialized(AppState_t appState)",
			"bool IsBasisLinearIndependent(Basis_t basis, r32 tolerance = 0.001f)",
			"bool IsCharAlphaNumeric(u32 codepoint)",
			"bool IsCharAlphabetic(u32 codepoint)",
			"bool IsCharAnsii(u32 codepoint)",
			"bool IsCharExtendedAnsii(u32 codepoint)",
			"bool IsCharHexadecimal(u32 codepoint)",
			"bool IsCharLowercaseAlphabet(u32 codepoint)",
			"bool IsCharNumeric(u32 codepoint)",
			"bool IsCharPairWordBreak(u32 prevCodepoint, u32 nextCodepoint, bool forward, bool subwords)",
			"bool IsCharPunctuationEnd(u32 codepoint)",
			"bool IsCharPunctuationStart(u32 codepoint)",
			"bool IsCharRenderableAnsii(u32 codepoint)",
			"bool IsCharSyntax(u32 codepoint)",
			"bool IsCharUppercaseAlphabet(u32 codepoint)",
			"bool IsCharWhitespace(u32 codepoint, bool includeNewLines = false)",
			"bool IsCurrentAppState()",
			"bool IsDstActive(Month_t month, u8 day, u8 hour, DayOfWeek_t dayOfWeek)",
			"bool IsEmpty(const Serializable_t serializable)",
			"bool IsEmptyStr(MyStr_t target)",
			"bool IsFullAppState(AppState_t appState)",
			"bool IsInitialized(const MemArena_t* arena)",
			"bool IsInsideBox(box boundingBox, v3 point)",
			"bool IsInsideBoxi(boxi boundingBox, v3i point, bool includePositiveEdges = false)",
			"bool IsInsideObb2D(obb2 rectangle, v2 point)",
			"bool IsInsideRec(rec rectangle, v2 point)",
			"bool IsInsideReci(reci rectangle, v2i point, bool includePositiveEdges = false)",
			"bool IsInsideTriangle(v2 p0, v2 p1, v2 p2, v2 test)",
			"bool IsItemInLinkedList(const LinkedList_t* list, const void* itemPntr, u64* indexOut = nullptr)",
			"bool IsNullStr(MyStr_t target)",
			"bool IsNullTerminated(StringBufferGeneric_t* stringBuffer)",
			"bool IsPntrInBktArray(const BktArray_t* array, const void* item, u64* indexOut = nullptr, bool lenient = false)",
			"bool IsPntrInsideRange(const void* testPntr, const void* rangeBase, u64 rangeSize, bool inclusive = false)",
			"bool IsPolygonClockwise(u64 numVertices, v2* vertices)",
			"bool IsPostMeridian(u16 twentyFourHourValue)",
			"bool IsStrNullTerminated(MyStr_t target)",
			"bool IsStringValidIdentifier(MyStr_t str, bool allowUnderscores = true, bool allowNumbers = true, bool allowLeadingNumbers = false, bool allowEmpty = false, bool allowSpaces = false)",
			"bool IsTriangleClockwise(v2 p0, v2 p1, v2 p2)",
			"bool LineParserGetLine(LineParser_t* parser, MyStr_t* lineOut)",
			"bool MaxNoInfinitiesR32(r32 value1, r32 value2, r32 value3 = 0, r32* outValue, u8* whichIsMaxOut = nullptr)",
			"bool MaxNoInfinitiesR64(r64 value1, r64 value2, r64 value3 = 0, r64* outValue, u8* whichIsMaxOut = nullptr)",
			"bool MemArenaVerify(MemArena_t* arena, bool assertOnFailure = false)",
			"bool MinNoInfinitiesR32(r32 value1, r32 value2, r32 value3 = 0, r32* outValue, u8* whichIsMaxOut = nullptr)",
			"bool MinNoInfinitiesR64(r64 value1, r64 value2, r64 value3 = 0, r64* outValue, u8* whichIsMaxOut = nullptr)",
			"bool NB_HANDLE_COMMAND_DEFINITION(struct NetworkBus_t* bus, struct NetworkBusClient_t* sourceClient, NbPacketHandleFlags_t handleFlags, struct NetworkCmdHeader_t header, const u8* payloadPntr)",
			"bool NetworkBusSendCmd(NetworkBus_t* bus, NetworkBusClient_t* client, u64 packetId, u32 cmd, Serializable_t payloadSerializable = Serializable_Empty)",
			"bool NetworkBusSendCmdStandardPayload(NetworkBus_t* bus, NetworkBusClient_t* client, u64 packetId, u32 cmd, u64 sentPacketId, u32 sentCmd)",
			"bool NetworkBusSendCmdWithPayload(NetworkBus_t* bus, NetworkBusClient_t* client, u64 packetId, u32 cmd, u64 payloadLength, const void* payloadPntr)",
			"bool NetworkBusSendFailure(NetworkBus_t* bus, NetworkBusClient_t* client, u64 packetId, u64 sentPacketId, u32 sentCmd)",
			"bool NetworkBusSendSuccess(NetworkBus_t* bus, NetworkBusClient_t* client, u64 packetId, u64 sentPacketId, u32 sentCmd)",
			"bool NetworkBusServiceBuffer(NetworkBus_t* bus, u64 programTime, BufferedSocketBuffer_t* buffer)",
			"bool Obb2DBasicallyEqual(obb2 left, obb2 right, r32 tolerance = 0.001f)",
			"bool RayVsBox(Ray3_t ray, box boundingBox, RayVsBoxResult_t* result, bool giveNegativeTimes = false)",
			"bool RayVsObb2D(Ray2_t ray, obb2 boundingBox, RayVsObb2DResult_t* result, bool giveNegativeTimes = false)",
			"bool RayVsRectangle2D(Ray2_t ray, rec rectangle, RayVsRectangle2DResult_t* result, bool giveNegativeTimes = false)",
			"bool ReadEntireFile(bool fromDataDir, MyStr_t path, MyStr_t* contentsOut, MemArena_t* memArena)",
			"bool RecBasicallyEqual(rec left, rec right, r32 tolerance = 0.001f)",
			"bool ReciEqual(reci left, reci right)",
			"bool RecisIntersect(reci rectangle1, reci rectangle2, bool inclusive = true)",
			"bool RecsIntersect(rec rectangle1, rec rectangle2, bool inclusive = true)",
			"bool SocketRead(OpenSocket_t* socket, void* outBufferPntr, u64 outBufferSize, u64* outReceivedNumBytes)",
			"bool SocketReadFromAny(OpenSocket_t* socket, void* outBufferPntr, u64 outBufferSize, u64* outReceivedNumBytes, IpAddressAndPort_t* addressOut = nullptr)",
			"bool SocketWrite(OpenSocket_t* socket, u64 dataSize, const void* dataPntr, u64* numBytesSentOut = nullptr)",
			"bool SocketWriteStr(OpenSocket_t* socket, MyStr_t messageStr, u64* numBytesSentOut = nullptr)",
			"bool SocketWriteTo(OpenSocket_t* socket, IpAddressAndPort_t destAddress, u64 dataSize, const void* dataPntr, u64* numBytesSentOut = nullptr)",
			"bool SocketWriteToStr(OpenSocket_t* socket, IpAddressAndPort_t destAddress, MyStr_t messageStr, u64* numBytesSentOut = nullptr)",
			"bool SplitStringFixed(MyStr_t target, MyStr_t delineator, u64 numPieces, MyStr_t* piecesBuffer, bool ignoreCase = false)",
			"bool StrEndsWith(MyStr_t str, MyStr_t suffix, bool ignoreCase = false)",
			"bool StrEndsWithSlash(MyStr_t str)",
			"bool StrEquals(MyStr_t target, MyStr_t comparison)",
			"bool StrEqualsIgnoreCase(MyStr_t target, MyStr_t comparison)",
			"bool StrHashExpand(StrHashDict_t* dict, u64 numItemsRequired)",
			"bool StrStartsWith(MyStr_t str, MyStr_t prefix, bool ignoreCase = false)",
			"bool StrStartsWithSlash(MyStr_t str)",
			"bool StringBufferTryAppend(StringBufferGeneric_t* stringBuffer, MyStr_t str, bool appendWhatYouCan = true)",
			"bool StringBufferTryAppendPrint(StringBufferGeneric_t* stringBuffer, const char* formatString, ...)",
			"bool StringBufferTryPrint(StringBufferGeneric_t* stringBuffer, const char* formatString, ...)",
			"bool StringBufferTrySet(StringBufferGeneric_t* stringBuffer, MyStr_t str, bool appendWhatYouCan = true)",
			"bool TextParserGetToken(TextParser_t* parser, ParsingToken_t* tokenOut)",
			"bool TryDeserResourceManifest(MyStr_t fileContents, ProcessLog_t* log, ResourceManifest_t* manifestOut, MemArena_t* memArena)",
			"bool TryFindCmdInBuffer(BufferedSocketBuffer_t* buffer, u64 programTime, NetworkCmdHeader_t* headerOut, u8** payloadPntrOut)",
			"bool TryOpenNewBufferedMultiSocket(SocketProtocol_t protocol, IpPort_t port, BufferedSocket_t* socketOut, MemArena_t* memArena, u64 mainRxBufferSize, u64 connectionBufferSize)",
			"bool TryOpenNewBufferedSocket(SocketProtocol_t protocol, IpAddressAndPort_t destAddress, BufferedSocket_t* socketOut, MemArena_t* memArena, u64 bufferSize)",
			"bool TryOpenNewMultiSocket(SocketProtocol_t protocol, IpPort_t port, OpenSocket_t* socketOut)",
			"bool TryOpenNewSocket(SocketProtocol_t protocol, IpAddressAndPort_t destAddress, OpenSocket_t* socketOut)",
			"bool TryPackAnotherRec(reci boundingRec, u64 numExistingRecs, const reci* existingRecs, v2i newRecSize, v2i* packPosOut)",
			"bool TryParseBitfieldEnum(MyStr_t str, enum_t* valueOut, enum_t enumCount, GetEnumStr_f* getEnumStrFunc, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseBool(MyStr_t str, bool* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseColor(MyStr_t str, Color_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool alphaAtBeginning = true)",
			"bool TryParseDir2(MyStr_t str, Dir2_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseDir3(MyStr_t str, Dir3_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseEnum(MyStr_t str, enum_t* valueOut, enum_t enumCount, GetEnumStr_f* getEnumStrFunc, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseI16(MyStr_t str, i16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI32(MyStr_t str, i32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI64(MyStr_t str, i64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseI8(MyStr_t str, i8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseIpAddress(MyStr_t str, IpAddress_t* valueOut = nullptr, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseIpAddress4(MyStr_t str, IpAddress4_t* valueOut = nullptr, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseIpAddress6(MyStr_t str, IpAddress6_t* valueOut = nullptr, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseR32(MyStr_t str, r32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowSuffix = true, bool allowInfinity = false)",
			"bool TryParseR64(MyStr_t str, r64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowInfinity = false)",
			"bool TryParseReci(MyStr_t str, reci* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseU16(MyStr_t str, u16* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU32(MyStr_t str, u32* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU64(MyStr_t str, u64* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseU8(MyStr_t str, u8* valueOut, TryParseFailureReason_t* reasonOut = nullptr, bool allowHex = true, bool allowBinary = true, bool allowDecimal = true)",
			"bool TryParseUuid(MyStr_t str, Uuid_t* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseV2(MyStr_t str, v2* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool TryParseV2i(MyStr_t str, v2i* valueOut, TryParseFailureReason_t* reasonOut = nullptr)",
			"bool UpdateAnimationDown(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationDownTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool UpdateAnimationUp(r32* animTimerPntr, r32 animationTimeMs)",
			"bool UpdateAnimationUpTo(r32* animTimerPntr, r32 animationTimeMs, r32 target)",
			"bool UuidEquals(const Uuid_t* left, const Uuid_t* right)",
			"bool VarArrayExpand(VarArray_t* array, u64 capacityRequired)",
			"bool Vec2BasicallyEqual(v2 left, v2 right, r32 tolerance = 0.001f)",
			"bool Vec2iEqual(v2i left, v2i right)",
			"bool Vec3BasicallyEqual(v3 left, v3 right, r32 tolerance = 0.001f)",
			"bool Vec3iEqual(v3i left, v3i right)",
			"bool Vec4BasicallyEqual(v4 left, v4 right, r32 tolerance = 0.001f)",
			"bool Vec4iEqual(v4i left, v4i right)",
			"bool WriteEntireFile(MyStr_t path, MyStr_t contents)",
			"bool XmlParserCheckIdentifierHasValidChars(XmlParser_t* parser, MyStr_t identifierStr, XmlParseResult_t* result, ProcessLog_t* log)",
			"bool XmlParserGetToken(XmlParser_t* parser, XmlParseResult_t* result, ProcessLog_t* log)",
			"box BoxCubify(box boundingBox, bool makeLarger = true, bool center = true)",
			"box BoxDeflate(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxDeflateX(box boundingBox, r32 subWidth)",
			"box BoxDeflateY(box boundingBox, r32 subHeight)",
			"box BoxDeflateZ(box boundingBox, r32 subDepth)",
			"box BoxExpand(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxExpandX(box boundingBox, r32 extraWidth)",
			"box BoxExpandY(box boundingBox, r32 extraHeight)",
			"box BoxExpandZ(box boundingBox, r32 extraDepth)",
			"box BoxInflate(box boundingBox, r32 extraWidth, r32 extraHeight, r32 extraDepth)",
			"box BoxInflateX(box boundingBox, r32 extraWidth)",
			"box BoxInflateY(box boundingBox, r32 extraHeight)",
			"box BoxInflateZ(box boundingBox, r32 extraDepth)",
			"box BoxInvert(box boundingBox)",
			"box BoxInvertX(box boundingBox)",
			"box BoxInvertY(box boundingBox)",
			"box BoxInvertZ(box boundingBox)",
			"box BoxRetract(box boundingBox, r32 subWidth, r32 subHeight, r32 subDepth)",
			"box BoxRetractX(box boundingBox, r32 subWidth)",
			"box BoxRetractY(box boundingBox, r32 subHeight)",
			"box BoxRetractZ(box boundingBox, r32 subDepth)",
			"box BoxScale(box boundingBox, r32 scalar)",
			"box BoxScale3(box boundingBox, r32 scaleX, r32 scaleY, r32 scaleZ)",
			"box BoxShift(box boundingBox, r32 amountX, r32 amountY, r32 amountZ)",
			"box BoxUninvert(box boundingBox)",
			"box NewBox(v3 bottomLeft, v3 size)",
			"box NewBoxCentered(v3 center, v3 size)",
			"box ToBox(boxi boundingBox)",
			"boxi BoxiBoth(boxi boundingBox1, boxi boundingBox2)",
			"boxi BoxiCubify(boxi boundingBox, bool makeLarger = true)",
			"boxi BoxiDeflate(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiDeflateX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiDeflateY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiDeflateZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiExpand(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiExpandToVec3i(boxi boundingBox, v3i newPoint)",
			"boxi BoxiExpandX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiExpandY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiExpandZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInflate(boxi boundingBox, i32 extraWidth, i32 extraHeight, i32 extraDepth)",
			"boxi BoxiInflateX(boxi boundingBox, i32 extraWidth)",
			"boxi BoxiInflateY(boxi boundingBox, i32 extraHeight)",
			"boxi BoxiInflateZ(boxi boundingBox, i32 extraDepth)",
			"boxi BoxiInvert(boxi boundingBox)",
			"boxi BoxiInvertX(boxi boundingBox)",
			"boxi BoxiInvertY(boxi boundingBox)",
			"boxi BoxiInvertZ(boxi boundingBox)",
			"boxi BoxiRetract(boxi boundingBox, i32 subWidth, i32 subHeight, i32 subDepth)",
			"boxi BoxiRetractX(boxi boundingBox, i32 subWidth)",
			"boxi BoxiRetractY(boxi boundingBox, i32 subHeight)",
			"boxi BoxiRetractZ(boxi boundingBox, i32 subDepth)",
			"boxi BoxiScale(boxi boundingBox, i32 scalar)",
			"boxi BoxiScale3(boxi boundingBox, i32 scaleX, i32 scaleY, i32 scaleZ)",
			"boxi BoxiShift(boxi boundingBox, i32 amountX, i32 amountY, i32 amountZ)",
			"boxi BoxiUninvert(boxi boundingBox)",
			"boxi NewBoxi(v3i bottomLeft, v3i size)",
			"boxi NewBoxiBetween(v3i point1, v3i point2)",
			"char GetHexChar(u8 hexValue, bool upperCase = true)",
			"char GetLowercaseAnsiiChar(char c)",
			"char GetUppercaseAnsiiChar(char c)",
			"char* AllocCharsAndFill(MemArena_t* arena, u64 numChars, const char* dataForFill, bool addNullTerm = true)",
			"char* AllocCharsAndFillNt(MemArena_t* arena, const char* nullTermStr, bool addNullTerm = true)",
			"char* PrintInArena(MemArena_t* arena, const char* formatString, ...)",
			"char* ToStr(StringBufferGeneric_t* stringBuffer)",
			"const char* FormatBytesNt(u64 numBytes, MemArena_t* memArena)",
			"const char* FormatMillisecondsNt(u64 milliseconds, MemArena_t* memArena)",
			"const char* FormatNumberWithCommasNt(u64 number, MemArena_t* memArena = nullptr)",
			"const char* FormatRealTimeNt(const RealTime_t* realTime, MemArena_t* memArena, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const char* GetAppStateChangeTypeStr(AppStateChangeType_t enumValue)",
			"const char* GetAppStateStr(AppState_t enumValue)",
			"const char* GetBtnStr(Btn_t enumValue)",
			"const char* GetBufferedSocketBufferTypeStr(BufferedSocketBufferType_t enumValue)",
			"const char* GetColorIlluminantStr(ColorIlluminant_t enumValue);",
			"const char* GetColorObserverStr(ColorObserver_t enumValue);",
			"const char* GetCyclicFuncTypeStr(CyclicFuncType_t funcType)",
			"const char* GetDayOfMonthString(u16 dayOfMonth)",
			"const char* GetDayOfWeekStr(DayOfWeek_t dayOfWeek, bool shortened = false)",
			"const char* GetDbgLevelStr(DbgLevel_t gyDbgLevel)",
			"const char* GetEasingStyleStr(EasingStyle_t style)",
			"const char* GetFileNamePartNt(const char* filePath)",
			"const char* GetFontCapsStr(Font_t font)",
			"const char* GetFontRangeCharStr(FontRange_t range, u64 charIndex)",
			"const char* GetFontRangeStr(FontRange_t range)",
			"const char* GetMemArenaTypeStr(MemArenaType_t arenaType)",
			"const char* GetMonthStr(Month_t month)",
			"const char* GetNbPacketHandleFlagsStr(NbPacketHandleFlags_t enumValue)",
			"const char* GetNetworkBusCmdStr(NetworkBusCmd_t cmd)",
			"const char* GetNetworkBusStateStr(NetworkBusState_t enumValue)",
			"const char* GetOsErrorStr(OsError_t enumValue)",
			"const char* GetPDLanguageStr(PDLanguage language)",
			"const char* GetPDSystemEventStr(PDSystemEvent event)",
			"const char* GetParsingTokenTypeStr(ParsingTokenType_t enumValue)",
			"const char* GetRandomSeriesTypeAcronymStr(RandomSeriesType_t enumValue)",
			"const char* GetRandomSeriesTypeStr(RandomSeriesType_t enumValue)",
			"const char* GetResponseCheckResultStr(ResponseCheckResult_t enumValue)",
			"const char* GetSocketErrorStr(SocketError_t enumValue)",
			"const char* GetSocketProtocolStr(SocketProtocol_t enumValue)",
			"const char* GetSocketTypeStr(SocketType_t enumValue)",
			"const char* GetSocketWarningStr(SocketWarning_t enumValue)",
			"const char* GetTimeUnitStr(TimeUnit_t timeUnit, bool shortened = false)",
			"const char* GetTryDeserResourceManifestErrorStr(TryDeserResourceManifestError_t enumValue);",
			"const char* GetTryParseFailureReasonStr(TryParseFailureReason_t reason)",
			"const char* GetWordBreakCharClassStr(WordBreakCharClass_t enumValue)",
			"const char* GetXmlParseResultTypeStr(XmlParseResultType_t enumValue)",
			"const char* GetXmlParsingErrorStr(XmlParsingError_t error)",
			"const char* TempFormatMillisecondsNt(u64 milliseconds)",
			"const char* TempFormatRealTimeNt(const RealTime_t* realTime, bool includeDayOfWeek = true, bool includeHourMinuteSecond = true, bool includeMonthDayYear = true)",
			"const void* BinDeser_ReadStructDynamicSize_(const void* dataPntr, u64 dataSize, u64* byteIndexPntr, u64* structSizeOut, u64 sizeMemberOffset, u64 minStructSize, u64 maxStructSize)",
			"const void* BinDeser_ReadStruct_(const void* dataPntr, u64 dataSize, u64* byteIndexPntr, u64 structureSize)",
			"const void* GetFifoLineEndPntr(const StringFifoLine_t* line)",
			"i32 CompareCodepoints(u32 codepoint1, u32 codepoint2)",
			"i32 CompareFuncI16(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncI8(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncMyStr(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncR32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncR64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU16(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU32(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU64(const void* left, const void* right, void* contextPntr)",
			"i32 CompareFuncU8(const void* left, const void* right, void* contextPntr)",
			"i32 GetRandI32(RandomSeries_t* series)",
			"i32 GetRandI32(RandomSeries_t* series, i32 min, i32 max)",
			"i32 RoundUpToI32(i32 value, i32 chunkSize)",
			"i32 StrCompareIgnoreCase(MyStr_t str1, MyStr_t str2)",
			"i32 Vec2iDeterminant(v2i left, v2i right)",
			"i32 Vec2iDot(v2i left, v2i right)",
			"i32 Vec3iDeterminant(v3i left, v3i right)",
			"i32 Vec3iDot(v3i left, v3i right)",
			"i32 Vec4iDeterminant(v4i left, v4i right)",
			"i32 Vec4iDot(v4i left, v4i right)",
			"i64 QuickSortPartition(void* arrayPntr, u64 numElements, u64 elementSize, void* workingSpace, CompareFunc_f* compareFunc, void* contextPntr = nullptr)",
			"i64 RoundUpToI64(i64 value, i64 chunkSize)",
			"i8 GetRandI8(RandomSeries_t* series)",
			"i8 GetRandI8(RandomSeries_t* series, i8 min, i8 max)",
			"inline Btn_t GetCrankBtn(bool clockwise)",
			"inline Btn_t ToBtn(Dir2_t direction)",
			"inline Dir2_t ToDir2(Btn_t btn)",
			"inline MemArena_t* GetScratchArena(MemArena_t* avoidConflictWith1 = nullptr, MemArena_t* avoidConflictWith2 = nullptr)",
			"inline Serializable_t NewSerializable_Box(box*    boxPntr)",
			"inline Serializable_t NewSerializable_Boxi(boxi*  boxiPntr)",
			"inline Serializable_t NewSerializable_I16(u16*    u8Pntr)",
			"inline Serializable_t NewSerializable_I32(u32*    u8Pntr)",
			"inline Serializable_t NewSerializable_I64(u64*    u8Pntr)",
			"inline Serializable_t NewSerializable_I8(u8*      u8Pntr)",
			"inline Serializable_t NewSerializable_MyStr(MyStr_t* strPntr)",
			"inline Serializable_t NewSerializable_Obb2D(obb2* obb2Pntr)",
			"inline Serializable_t NewSerializable_Obb3D(obb3* obb3Pntr)",
			"inline Serializable_t NewSerializable_R32(r32*    r32Pntr)",
			"inline Serializable_t NewSerializable_R64(r64*    r64Pntr)",
			"inline Serializable_t NewSerializable_Rec(rec*    recPntr)",
			"inline Serializable_t NewSerializable_Reci(reci*  reciPntr)",
			"inline Serializable_t NewSerializable_U16(u16*    u8Pntr)",
			"inline Serializable_t NewSerializable_U32(u32*    u8Pntr)",
			"inline Serializable_t NewSerializable_U64(u64*    u8Pntr)",
			"inline Serializable_t NewSerializable_U8(u8*      u8Pntr)",
			"inline Serializable_t NewSerializable_V2(v2*      v2Pntr)",
			"inline Serializable_t NewSerializable_V2i(v2i*    v2iPntr)",
			"inline Serializable_t NewSerializable_V3(v3*      v3Pntr)",
			"inline Serializable_t NewSerializable_V3i(v3i*    v2iPntr)",
			"inline Serializable_t NewSerializable_V4(v4*      v4Pntr)",
			"inline Serializable_t NewSerializable_V4i(v4i*    v2iPntr)",
			"inline Serializable_t NewSerializable_VarArrayBinaryCopy(VarArray_t* arrayPntr)",
			"inline bool AreIpAddress4sEqual(IpAddress4_t left, IpAddress4_t right)",
			"inline bool AreIpAddress6sEqual(IpAddress6_t left, IpAddress6_t right)",
			"inline bool AreIpAddressAndPortsEqual(IpAddressAndPort_t left, IpAddressAndPort_t right)",
			"inline bool AreIpAddressesEqual(IpAddress_t left, IpAddress_t right)",
			"inline bool BasicallyBetweenR32(r32 value, r32 min, r32 max, r32 tolerance = 0.001f)",
			"inline bool BasicallyBetweenR64(r64 value, r64 min, r64 max, r64 tolerance = 0.001)",
			"inline bool BasicallyEqualR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyEqualR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BasicallyGreaterThanR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyGreaterThanR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BasicallyLessThanR32(r32 value1, r32 value2, r32 tolerance = 0.001f)",
			"inline bool BasicallyLessThanR64(r64 value1, r64 value2, r64 tolerance = 0.001)",
			"inline bool BtnChanged(Btn_t btn)",
			"inline bool BtnChangedRaw(Btn_t btn)",
			"inline bool BtnDown(Btn_t btn)",
			"inline bool BtnDownRaw(Btn_t btn)",
			"inline bool BtnHeld(Btn_t btn, u32 minTime)",
			"inline bool BtnHeldRaw(Btn_t btn, u32 minTime)",
			"inline bool BtnPressed(Btn_t btn)",
			"inline bool BtnPressedRaw(Btn_t btn)",
			"inline bool BtnReleased(Btn_t btn)",
			"inline bool BtnReleasedRaw(Btn_t btn)",
			"inline bool BtnTapped(Btn_t btn, u32 maxTime)",
			"inline bool BtnTappedRaw(Btn_t btn, u32 maxTime)",
			"inline bool CrankMoved() ",
			"inline bool CrankMovedRaw() ",
			"inline bool DoesSocketHaveErrors(const OpenSocket_t* socket)",
			"inline bool IsCrankDocked() ",
			"inline bool IsCrankDockedRaw() ",
			"inline bool IsCrankUndocked() ",
			"inline bool IsDpadBtn(Btn_t btn)",
			"inline bool IsFaceBtn(Btn_t btn)",
			"inline bool IsInfiniteR32(r32 value)",
			"inline bool IsInfiniteR64(r64 value)",
			"inline bool IsLetterBtn(Btn_t btn)",
			"inline bool IsPseudoBtn(Btn_t btn)",
			"inline bool IsSocketOpen(const OpenSocket_t* socket)",
			"inline bool IsZero(IpAddress_t address)",
			"inline bool WasBtnHandled(Btn_t btn)",
			"inline bool WasCrankDeltaHandled() ",
			"inline i16 AbsDiffI16(i16 value1, i16 value2)",
			"inline i16 AbsI16(i16 value)",
			"inline i16 ClampI16(i16 value, i16 min, i16 max)",
			"inline i16 ClampI32toI16(i32 value)",
			"inline i16 ClampR32toI16(r32 value)",
			"inline i16 ConvertSampleR64ToI16(r64 sample)",
			"inline i16 SignOfI16(i16 value)",
			"inline i32 AbsDiffI32(i32 value1, i32 value2)",
			"inline i32 AbsI32(i32 value)",
			"inline i32 CeilDivI32(i32 dividend, i32 divisor)",
			"inline i32 CeilR32i(r32 value)",
			"inline i32 CeilToI32(i32 value, i32 chunkSize)",
			"inline i32 ClampI32(i32 value, i32 min, i32 max)",
			"inline i32 ClampU32toI32(u32 value)",
			"inline i32 ConvertSampleR64ToI32(r64 sample)",
			"inline i32 FloorR32i(r32 value)",
			"inline i32 MaxI32(i32 value1, i32 value2)",
			"inline i32 MinI32(i32 value1, i32 value2)",
			"inline i32 RandI32(i32 min, i32 max)",
			"inline i32 RoundR32i(r32 value)",
			"inline i32 SignOfI32(i32 value)",
			"inline i64 AbsDiffI64(i64 value1, i64 value2)",
			"inline i64 AbsI64(i64 value)",
			"inline i64 CeilR64i(r64 value)",
			"inline i64 ClampI64(i64 value, i64 min, i64 max)",
			"inline i64 FloorR64i(r64 value)",
			"inline i64 MaxI64(i64 value1, i64 value2)",
			"inline i64 MinI64(i64 value1, i64 value2)",
			"inline i64 RandI64(i64 min, i64 max)",
			"inline i64 RoundR64i(r64 value)",
			"inline i64 SignOfI64(i64 value)",
			"inline i8 AbsDiffI8(i8 value1, i8 value2)",
			"inline i8 AbsI8(i8 value)",
			"inline i8 ClampI32toI8(i32 value)",
			"inline i8 ClampI8(i8 value, i8 min, i8 max)",
			"inline i8 ConvertSampleR64ToI8(r64 sample)",
			"inline i8 ReadI8FromU8(u8 value)",
			"inline i8 SignOfI8(i8 value)",
			"inline r32 AbsR32(r32 value)",
			"inline r32 AcosR32(r32 value)",
			"inline r32 AsinR32(r32 value)",
			"inline r32 AtanJoinedR32(r32 value)",
			"inline r32 AtanR32(r32 y, r32 x)",
			"inline r32 CbrtR32(r32 value)",
			"inline r32 CeilR32(r32 value)",
			"inline r32 ClampR32(r32 value, r32 min, r32 max)",
			"inline r32 CosR32(r32 angle)",
			"inline r32 DecimalPartR32(r32 value)",
			"inline r32 FloorR32(r32 value)",
			"inline r32 InverseLerpR32(r32 start, r32 end, r32 value, bool clamp = false)",
			"inline r32 LerpClampR32(r32 val1, r32 val2, r32 amount)",
			"inline r32 LerpR32(r32 val1, r32 val2, r32 amount)",
			"inline r32 MaxR32(r32 value1, r32 value2)",
			"inline r32 MinR32(r32 value1, r32 value2)",
			"inline r32 ModR32(r32 numerator, r32 denominator)",
			"inline r32 PowR32(r32 value, r32 power)",
			"inline r32 RandR32(r32 min, r32 max)",
			"inline r32 RoundR32(r32 value)",
			"inline r32 SawR32(r32 angle)",
			"inline r32 SignOfR32(r32 value)",
			"inline r32 SinR32(r32 angle)",
			"inline r32 SqrtR32(r32 value)",
			"inline r32 TanR32(r32 angle)",
			"inline r64 AbsR64(r64 value)",
			"inline r64 AcosR64(r64 value)",
			"inline r64 AsinR64(r64 value)",
			"inline r64 AtanJoinedR64(r64 value)",
			"inline r64 AtanR64(r64 y, r64 x)",
			"inline r64 CbrtR64(r64 value)",
			"inline r64 CeilR64(r64 value)",
			"inline r64 ClampR64(r64 value, r64 min, r64 max)",
			"inline r64 ConvertSampleI16ToR64(i16 sampleI16)",
			"inline r64 ConvertSampleI32ToR64(i32 sampleI32)",
			"inline r64 ConvertSampleI8ToR64(i8 sampleI8)",
			"inline r64 CosR64(r64 angle)",
			"inline r64 DecimalPartR64(r64 value)",
			"inline r64 FloorR64(r64 value)",
			"inline r64 InverseLerpR64(r64 start, r64 end, r64 value, bool clamp = false)",
			"inline r64 LerpClampR64(r64 val1, r64 val2, r64 amount)",
			"inline r64 LerpR64(r64 val1, r64 val2, r64 amount)",
			"inline r64 MaxR64(r64 value1, r64 value2)",
			"inline r64 MinR64(r64 value1, r64 value2)",
			"inline r64 ModR64(r64 numerator, r64 denominator)",
			"inline r64 PowR64(r64 value, r64 power)",
			"inline r64 RandR64(r64 min, r64 max)",
			"inline r64 RoundR64(r64 value)",
			"inline r64 SawR64(r64 angle)",
			"inline r64 SignOfR64(r64 value)",
			"inline r64 SinR64(r64 angle)",
			"inline r64 SqrtR64(r64 value)",
			"inline r64 TanR64(r64 angle)",
			"inline u16 AbsDiffU16(u16 value1, u16 value2)",
			"inline u16 ClampU16(u16 value, u16 min, u16 max)",
			"inline u32 AbsDiffU32(u32 value1, u32 value2)",
			"inline u32 CeilDivU32(u32 dividend, u32 divisor)",
			"inline u32 CeilToU32(u32 value, u32 chunkSize)",
			"inline u32 ClampI32toU32(i32 value)",
			"inline u32 ClampU32(u32 value, u32 min, u32 max)",
			"inline u32 MaxU32(u32 value1, u32 value2)",
			"inline u32 MinU32(u32 value1, u32 value2)",
			"inline u32 RandU32(u32 min, u32 max)",
			"inline u64 AbsDiffU64(u64 value1, u64 value2)",
			"inline u64 CeilDivU64(u64 dividend, u64 divisor)",
			"inline u64 ClampU64(u64 value, u64 min, u64 max)",
			"inline u64 MaxU64(u64 value1, u64 value2)",
			"inline u64 MinU64(u64 value1, u64 value2)",
			"inline u8 AbsDiffU8(u8 value1, u8 value2)",
			"inline u8 ClampI32toU8(i32 value)",
			"inline u8 ClampU8(u8 value, u8 min, u8 max)",
			"inline u8 FlagsDiffU8(u8 flags1, u8 flags2)",
			"inline u8 StoreI8inU8(i8 value)",
			"inline void FreeScratchArena(MemArena_t* scratchArena)",
			"inline void HandleBtn(Btn_t btn)",
			"inline void HandleBtnExtended(Btn_t btn)",
			"inline void HandleCrankDelta() ",
			"inline void HandleCrankDocked() ",
			"inline void HandleCrankDockedExtended() ",
			"int MainUpdateCallback(void* userData)",
			"int PrintVa_Measure(const char* formatString, va_list args)",
			"int eventHandlerShim(PlaydateAPI* playdate, PDSystemEvent event, uint32_t arg)",
			"mat4 Mat4Adjoint(mat4 matrix)",
			"mat4 Mat4Cofactor(mat4 matrix)",
			"mat4 Mat4Diagonal(r32 r0c0, r32 r1c1, r32 r2c2, r32 r3c3, r32 other = 0.0f)",
			"mat4 Mat4Fill(r32 all)",
			"mat4 Mat4FromBasis(v3 basisX, v3 basisY, v3 basisZ)",
			"mat4 Mat4Inverse(mat4 matrix, bool* successOut = nullptr)",
			"mat4 Mat4LookAt(v3 position, v3 lookAt, v3 upVector)",
			"mat4 Mat4Multiply(mat4 left, mat4 right)",
			"mat4 Mat4Orthographic(r32 left, r32 right, r32 top, r32 bottom, r32 zNear, r32 zFar)",
			"mat4 Mat4Perspective(r32 fovy, r32 aspectRatio, r32 zNear, r32 zFar)",
			"mat4 Mat4Quaternion(quat q)",
			"mat4 Mat4Rotate(v3 axis, r32 angle)",
			"mat4 Mat4RotateX(r32 angle)",
			"mat4 Mat4RotateY(r32 angle)",
			"mat4 Mat4RotateZ(r32 angle)",
			"mat4 Mat4Scale2(r32 x, r32 y)",
			"mat4 Mat4Scale3(r32 x, r32 y, r32 z)",
			"mat4 Mat4ScaleW(r32 scale)",
			"mat4 Mat4ScaleX(r32 scale)",
			"mat4 Mat4ScaleY(r32 scale)",
			"mat4 Mat4ScaleZ(r32 scale)",
			"mat4 Mat4Translate2(r32 x, r32 y)",
			"mat4 Mat4Translate3(r32 x, r32 y, r32 z)",
			"mat4 Mat4TranslateX(r32 x)",
			"mat4 Mat4TranslateY(r32 y)",
			"mat4 Mat4TranslateZ(r32 z)",
			"mat4 Mat4Transpose(mat4 matrix)",
			"mat4 NewMat4(r32 r0c0, r32 r0c1, r32 r0c2, r32 r0c3, r32 r1c0, r32 r1c1, r32 r1c2, r32 r1c3, r32 r2c0, r32 r2c1, r32 r2c2, r32 r2c3, r32 r3c0, r32 r3c1, r32 r3c2, r32 r3c3)",
			"obb2 NewObb2D(v2 center, v2 size, r32 rotation)",
			"obb2 Obb2DDeflate(obb2 rectangle, r32 subWidth, r32 subHeight)",
			"obb2 Obb2DDeflateX(obb2 rectangle, r32 subWidth)",
			"obb2 Obb2DDeflateY(obb2 rectangle, r32 subHeight)",
			"obb2 Obb2DInflate(obb2 rectangle, r32 extraWidth, r32 extraHeight)",
			"obb2 Obb2DInflateX(obb2 rectangle, r32 extraWidth)",
			"obb2 Obb2DInflateY(obb2 rectangle, r32 extraHeight)",
			"obb2 Obb2DInvert(obb2 rectangle)",
			"obb2 Obb2DInvertX(obb2 rectangle)",
			"obb2 Obb2DInvertY(obb2 rectangle)",
			"obb2 Obb2DScale(obb2 boundingBox, r32 scalar)",
			"obb2 Obb2DShift(obb2 boundingBox, r32 amountX, r32 amountY)",
			"obb2 Obb2DSquarify(obb2 rectangle, bool makeLarger = true)",
			"obb2 Obb2DUninvert(obb2 rectangle)",
			"obb2 Obb2Line(v2 start, v2 end, r32 thickness)",
			"obb2 ToObb2D(rec rectangle)",
			"obb3 ToObb3D(box boundingBox)",
			"quat NewQuat(r32 x, r32 y, r32 z, r32 w, bool normalize = true)",
			"quat NewQuatFromBasis(Basis_t basis)",
			"quat NewQuatFromEuler(v3 eulerAngles, EulerOrder_t order = EulerOrder_XYZ)",
			"quat QuatEquivalent(const quat& quaternion)",
			"quat QuatGlobalRot(quat q, v3 axis, r32 angle)",
			"quat QuatLerp(const quat& start, const quat& end, r32 amount, bool linearly = true, bool normalizeResult = true)",
			"quat QuatLocalRot(quat q, v3 axis, r32 angle)",
			"quat QuatMult(const quat& left, const quat& right, bool normalize = true)",
			"quat QuatNormalize(const quat& quaternion)",
			"quat QuatOpposite(const quat& quaternion)",
			"quat ToQuat(mat4 matrix, bool assertOnFailure = true)",
			"r32 AngleDiffR32(r32 left, r32 right)",
			"r32 AngleFixR32(r32 angle)",
			"r32 AngleFlipHorizontalR32(r32 angle, bool normalize = true)",
			"r32 AngleFlipVerticalR32(r32 angle, bool normalize = true)",
			"r32 AngleFromVec2(r32 x, r32 y)",
			"r32 AngleFromVec2(v2 vector)",
			"r32 AngleLerpR32(r32 angleFrom, r32 angleTo, r32 amount)",
			"r32 AngleOppositeR32(r32 angle)",
			"r32 Animate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 AnimateAndPauseBy(u64 timeSource, r32 min, r32 max, u64 animationTime, u64 pauseTime, u64 offset = 0)",
			"r32 AnimateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 CYCLIC_FUNC2D_CALLBACK_DEF(CyclicFunc2D_t func, v2 t)",
			"r32 CYCLIC_FUNC_CALLBACK_DEF(CyclicFunc_t func, r32 t)",
			"r32 ColorChannelToR32(u8 valueU8)",
			"r32 CyclicFunc2DGetValue(CyclicFunc2D_t func, v2 t)",
			"r32 CyclicFuncGetValue(CyclicFunc_t func, r32 t)",
			"r32 DodecGetFaceRadius(Dodec_t dodec)",
			"r32 DodecGetVertexRadius(Dodec_t dodec)",
			"r32 Ease(EasingStyle_t style, r32 p)",
			"r32 EaseBackIn(r32 p)",
			"r32 EaseBackInOut(r32 p)",
			"r32 EaseBackOut(r32 p)",
			"r32 EaseBounceIn(r32 p)",
			"r32 EaseBounceInOut(r32 p)",
			"r32 EaseBounceOut(r32 p)",
			"r32 EaseCircularIn(r32 p)",
			"r32 EaseCircularInOut(r32 p)",
			"r32 EaseCircularOut(r32 p)",
			"r32 EaseCubicIn(r32 p)",
			"r32 EaseCubicInOut(r32 p)",
			"r32 EaseCubicOut(r32 p)",
			"r32 EaseEarlyInOut(r32 p)",
			"r32 EaseElasticIn(r32 p)",
			"r32 EaseElasticInOut(r32 p)",
			"r32 EaseElasticOut(r32 p)",
			"r32 EaseExponentialIn(r32 p)",
			"r32 EaseExponentialInOut(r32 p)",
			"r32 EaseExponentialOut(r32 p)",
			"r32 EaseLinear(r32 p)",
			"r32 EaseQuadraticIn(r32 p)",
			"r32 EaseQuadraticInOut(r32 p)",
			"r32 EaseQuadraticOut(r32 p)",
			"r32 EaseQuarticIn(r32 p)",
			"r32 EaseQuarticInOut(r32 p)",
			"r32 EaseQuarticOut(r32 p)",
			"r32 EaseQuinticIn(r32 p)",
			"r32 EaseQuinticInOut(r32 p)",
			"r32 EaseQuinticOut(r32 p)",
			"r32 EaseSineIn(r32 p)",
			"r32 EaseSineInOut(r32 p)",
			"r32 EaseSineOut(r32 p)",
			"r32 GetRandR32(RandomSeries_t* series)",
			"r32 GetRandR32(RandomSeries_t* series, r32 min, r32 max)",
			"r32 InverseEase(EasingStyle_t style, r32 y)",
			"r32 InverseEaseLinear(r32 y)",
			"r32 InverseEaseQuadraticIn(r32 y)",
			"r32 InverseEaseQuadraticInOut(r32 y)",
			"r32 InverseEaseQuadraticOut(r32 y)",
			"r32 InverseLerpRange(Range_t range, r32 value, bool clamp = false)",
			"r32 Mat4Determinant(mat4 matrix)",
			"r32 Oscillate(r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillatePhaseBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 OscillateSawBy(u64 timeSource, r32 min, r32 max, u64 periodMs, u64 offset = 0)",
			"r32 PentagonGetHeight(Pentagon_t pentagon)",
			"r32 PentagonGetHeight(r32 sideLength)",
			"r32 PentagonGetRadius(Pentagon_t pentagon)",
			"r32 PentagonGetRadius(r32 sideLength)",
			"r32 QuatGetAngle(const quat& quaternion)",
			"r32 SimplexGradient1D(i32 hash, r32 x)",
			"r32 SimplexGradient2D(i32 hash, r32 x, r32 y)",
			"r32 SimplexGradient3D(i32 hash, r32 x, r32 y, r32 z)",
			"r32 SimplexNoise1D(r32 x)",
			"r32 SimplexNoise2D(r32 x, r32 y)",
			"r32 SimplexNoise2DIter(r32 x, r32 y, u64 numIterations, r32 scale = 1.0f)",
			"r32 SubAnimAmountR32(r32 animAmount, r32 subPieceStart, r32 subPieceEnd)",
			"r32 SubAnimAmountTwoWayR32(r32 animAmount, r32 subPieceStart, r32 subPieceEnd)",
			"r32 Vec2AngleBetween(v2 vecLeft, v2 vecRight)",
			"r32 Vec2Determinant(v2 left, v2 right)",
			"r32 Vec2Dot(v2 left, v2 right)",
			"r32 Vec2Inner(v2 left, v2 right)",
			"r32 Vec2Length(v2 vector)",
			"r32 Vec2LengthSquared(v2 vector)",
			"r32 Vec2iLength(v2i vector)",
			"r32 Vec3AngleBetween(v3 vecLeft, v3 vecRight)",
			"r32 Vec3Determinant(v3 left, v3 right)",
			"r32 Vec3Dot(v3 left, v3 right)",
			"r32 Vec3Inner(v3 left, v3 right)",
			"r32 Vec3Length(v3 vector)",
			"r32 Vec3iLength(v3i vector)",
			"r32 Vec4Determinant(v4 left, v4 right)",
			"r32 Vec4Dot(v4 left, v4 right)",
			"r32 Vec4Inner(v4 left, v4 right)",
			"r32 Vec4Length(v4 vector)",
			"r32 Vec4iLength(v4i vector)",
			"r64 AngleDiffR64(r64 left, r64 right)",
			"r64 AngleFixR64(r64 angle)",
			"r64 AngleFlipHorizontalR64(r64 angle, bool normalize = true)",
			"r64 AngleFlipVerticalR64(r64 angle, bool normalize = true)",
			"r64 AngleLerpR64(r64 angleFrom, r64 angleTo, r64 amount)",
			"r64 AngleOppositeR64(r64 angle)",
			"r64 GetRandR64(RandomSeries_t* series)",
			"r64 GetRandR64(RandomSeries_t* series, r64 min, r64 max)",
			"r64 SubAnimAmountR64(r64 animAmount, r64 subPieceStart, r64 subPieceEnd)",
			"r64 SubAnimAmountTwoWayR64(r64 animAmount, r64 subPieceStart, r64 subPieceEnd)",
			"rec GetBoundsForBezierPath(const BezierPath_t* path)",
			"rec GetBoundsForBezierPathPart(v2 currentPos, const BezierPathPart_t* part)",
			"rec GetObb2DAlignedBounds(obb2 boundingBox)",
			"rec NewRec(v2 topLeft, v2 size)",
			"rec NewRecBetween(r32 point1X, r32 point1Y, r32 point2X, r32 point2Y)",
			"rec NewRecCentered(v2 center, v2 size)",
			"rec RecBoth(rec rectangle1, rec rectangle2)",
			"rec RecDeflate(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecDeflateX(rec rectangle, r32 subWidth)",
			"rec RecDeflateY(rec rectangle, r32 subHeight)",
			"rec RecExpand(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecExpandDown(rec rectangle, r32 extraDown)",
			"rec RecExpandLeft(rec rectangle, r32 extraLeft)",
			"rec RecExpandRight(rec rectangle, r32 extraRight)",
			"rec RecExpandToVec2(rec rectangle, v2 newPoint)",
			"rec RecExpandUp(rec rectangle, r32 extraUp)",
			"rec RecExpandX(rec rectangle, r32 extraWidth)",
			"rec RecExpandY(rec rectangle, r32 extraHeight)",
			"rec RecInflate(rec rectangle, r32 extraWidth, r32 extraHeight)",
			"rec RecInflateX(rec rectangle, r32 extraWidth)",
			"rec RecInflateY(rec rectangle, r32 extraHeight)",
			"rec RecInvert(rec rectangle)",
			"rec RecInvertX(rec rectangle)",
			"rec RecInvertY(rec rectangle)",
			"rec RecOverlap(rec rectangle1, rec rectangle2)",
			"rec RecRetract(rec rectangle, r32 subWidth, r32 subHeight)",
			"rec RecRetractX(rec rectangle, r32 subWidth)",
			"rec RecRetractY(rec rectangle, r32 subHeight)",
			"rec RecScale(rec rectangle, r32 scalar)",
			"rec RecScale2(rec rectangle, r32 scaleX, r32 scaleY)",
			"rec RecShift(rec rectangle, r32 amountX, r32 amountY)",
			"rec RecSquarify(rec rectangle, bool makeLarger = true, bool center = true)",
			"rec RecUninvert(rec rectangle)",
			"rec ToRec(reci rectangle)",
			"reci NewReci(v2i topLeft, v2i size)",
			"reci PdAddClipRec(reci rectangle)",
			"reci PdClearClipRec()",
			"reci PdSetClipRec(reci rectangle)",
			"reci PlaydateCrankHintBubble(bool doRender, bool pointRight, r32 scale, v2i targetPos)",
			"reci ReciBoth(reci rectangle1, reci rectangle2)",
			"reci ReciDeflate(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciDeflateX(reci rectangle, i32 subWidth)",
			"reci ReciDeflateY(reci rectangle, i32 subHeight)",
			"reci ReciExpand(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciExpandDown(reci rectangle, i32 extraDown)",
			"reci ReciExpandLeft(reci rectangle, i32 extraLeft)",
			"reci ReciExpandRight(reci rectangle, i32 extraRight)",
			"reci ReciExpandToVec2i(reci rectangle, v2i newPoint)",
			"reci ReciExpandUp(reci rectangle, i32 extraUp)",
			"reci ReciExpandX(reci rectangle, i32 extraWidth)",
			"reci ReciExpandY(reci rectangle, i32 extraHeight)",
			"reci ReciInflate(reci rectangle, i32 extraWidth, i32 extraHeight)",
			"reci ReciInflateX(reci rectangle, i32 extraWidth)",
			"reci ReciInflateY(reci rectangle, i32 extraHeight)",
			"reci ReciInvert(reci rectangle)",
			"reci ReciInvertX(reci rectangle)",
			"reci ReciInvertY(reci rectangle)",
			"reci ReciOverlap(reci rectangle1, reci rectangle2)",
			"reci ReciRetract(reci rectangle, i32 subWidth, i32 subHeight)",
			"reci ReciRetractX(reci rectangle, i32 subWidth)",
			"reci ReciRetractY(reci rectangle, i32 subHeight)",
			"reci ReciScale(reci rectangle, i32 scalar)",
			"reci ReciScale2(reci rectangle, i32 scaleX, i32 scaleY)",
			"reci ReciShift(reci rectangle, i32 amountX, i32 amountY)",
			"reci ReciSquarify(reci rectangle, bool makeLarger = true)",
			"reci ReciUninvert(reci rectangle)",
			"static inline u64 XS128_rotl(const u64 x, int k)",
			"u16 Convert24HourTo12Hour(u16 twentyFourHourValue)",
			"u16 FnvHashU16(const void* bufferPntr, u64 numBytes)",
			"u16 GetRandU16(RandomSeries_t* series)",
			"u16 GetRandU16(RandomSeries_t* series, u16 min, u16 max)",
			"u32 CharToU32(char c)",
			"u32 FnvHashU32(const void* bufferPntr, u64 numBytes)",
			"u32 GetFontRangeChar(FontRange_t range, u64 charIndex)",
			"u32 GetLowercaseCodepoint(u32 codepoint)",
			"u32 GetRandU32(RandomSeries_t* series)",
			"u32 GetRandU32(RandomSeries_t* series, u32 min, u32 max)",
			"u32 GetUppercaseCodepoint(u32 codepoint)",
			"u32 RoundUpToU32(u32 value, u32 chunkSize)",
			"u32 TimeSince(u32 programTimeSnapshot)",
			"u64 AnimateAndPauseByU64(u64 timeSource, u64 min, u64 max, u64 animationTime, u64 pauseTime, u64 offset = 0, bool useFirstFrameForPause = false)",
			"u64 AnimateByU64(u64 timeSource, u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 AnimateU64(u64 min, u64 max, u64 periodMs, u64 offset = 0)",
			"u64 EndPerfTime(u8 timerIndex)",
			"u64 FifoLength(const Fifo_t* fifo)",
			"u64 FindNextWordBreakInString(MyStr_t str, u64 startIndex, bool forward, bool subwords, bool includeBreakAtStartIndex = false)",
			"u64 FnvHashStr(MyStr_t str)",
			"u64 FnvHashU64(const void* bufferPntr, u64 numBytes, u64 startingState = FNV_HASH_BASE_U64)",
			"u64 GetFifoLineMetaSize(const StringFifoLine_t* line)",
			"u64 GetFifoLineTotalSize(const StringFifoLine_t* line)",
			"u64 GetGreyscaleColorIndex(Color_t color)",
			"u64 GetItemIndexInLinkedList(const LinkedList_t* list, const void* itemPntr)",
			"u64 GetNumMarks(MemArena_t* arena)",
			"u64 GetNumSubPathsInBezierPath(const BezierPath_t* path)",
			"u64 GetNumVerticesInBezierPath(const BezierPath_t* path)",
			"u64 GetPredefPalColorIndex(Color_t color)",
			"u64 GetPureColorIndex(Color_t color)",
			"u64 GetRandU64(RandomSeries_t* series)",
			"u64 GetRandU64(RandomSeries_t* series, u64 min, u64 max)",
			"u64 GetStringFifoHeadIndex(const StringFifo_t* fifo)",
			"u64 GetStringFifoPntrIndex(const StringFifo_t* fifo, const void* pntr)",
			"u64 GetStringFifoTailIndex(const StringFifo_t* fifo)",
			"u64 GrowMemQuery(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, GrowMemToken_t* tokenOut = nullptr)",
			"u64 MarkPerfTime(u8 timerIndex)",
			"u64 NB_GET_PROGRAM_TIME_DEFINITION(struct NetworkBus_t* bus)",
			"u64 NetworkBusSendRetryPacket(NetworkBus_t* bus, NetworkBusClient_t* client, u32 cmd, u32 expectedRspCmd, u32 failureRspCmd, Serializable_t payloadSerializable = Serializable_Empty, u64 maxNumTries = NETWORK_BUS_DEFAULT_MAX_NUM_TRIES)",
			"u64 NetworkBusSendRetryPacketWithPayload(NetworkBus_t* bus, NetworkBusClient_t* client, u32 cmd, u32 expectedRspCmd, u32 failureRspCmd, u64 payloadLength, const void* payloadPntr, u64 maxNumTries = NETWORK_BUS_DEFAULT_MAX_NUM_TRIES)",
			"u64 OsGetMemoryPageSize()",
			"u64 PowerOfTwoGreaterThanOrEqualTo(u64 value, u8* powerOut = nullptr)",
			"u64 PushMemMark(MemArena_t* arena)",
			"u64 RemoveColinearAndDuplicateVertices(u64 numVertices, v2* vertices)",
			"u64 RoundUpToU64(u64 value, u64 chunkSize)",
			"u64 StrReplaceInPlace(MyStr_t str, MyStr_t target, MyStr_t replacement, bool ignoreCase = false)",
			"u64 StringBufferReplace(StringBufferGeneric_t* stringBuffer, MyStr_t targetStr, MyStr_t replacementStr, bool ignoreCase = false)",
			"u64 StringBuilderGetNumUnusedBytes(StringBuilder_t* builder, bool includeMemArenaSpace = false, GrowMemToken_t* growTokenOut = nullptr)",
			"u64 TimeSinceBy(u64 programTime, u64 programTimeSnapshot)",
			"u64 TrimLeadingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimTrailingWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 TrimWhitespace(MyStr_t* target, bool trimNewLines = false)",
			"u64 UnescapeQuotedStringInPlace(MyStr_t* target, bool removeQuotes = true, bool allowNewLineEscapes = true, bool allowOtherEscapeCodes = false)",
			"u64 WordTreeGetU64(WordTree_t* tree, MyStr_t word)",
			"u64* Triangulate2DEarClip(MemArena_t* memArena, MemArena_t* tempArena, u64 numVertices, const v2* vertices, u64* numIndicesOut = nullptr, bool debugDontDeallocate = false)",
			"u8 CharToU8(char c)",
			"u8 ColorChannelToU8(r32 valueR32)",
			"u8 FifoGetLastU8(const Fifo_t* fifo)",
			"u8 FifoGetU8(const Fifo_t* fifo, u64 index = 0)",
			"u8 FifoPopU8(Fifo_t* fifo)",
			"u8 FnvHashU8(const void* bufferPntr, u64 numBytes)",
			"u8 GetCodepointBeforeIndex(const char* strPntr, u64 startIndex, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUcs2(u64 maxNumWords, const u16* strPntr, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUtf8(u64 maxNumBytes, const char* strPntr, u32* codepointOut = nullptr)",
			"u8 GetCodepointForUtf8Str(MyStr_t str, u64 index, u32* codepointOut = nullptr)",
			"u8 GetDiceValueForDodecFace(u64 faceIndex)",
			"u8 GetFontRangeIndex(FontRange_t range)",
			"u8 GetHexCharValue(char hexChar)",
			"u8 GetLowerNibble(u8 value)",
			"u8 GetNumCharsInFontRange(FontRange_t range)",
			"u8 GetRandU8(RandomSeries_t* series)",
			"u8 GetRandU8(RandomSeries_t* series, u8 min, u8 max)",
			"u8 GetUcs2WordsForCode(u32 codepoint, u16* wordBufferOut, bool doAssertions = true)",
			"u8 GetUpperNibble(u8 value)",
			"u8 GetUtf8BytesForCode(u32 codepoint, u8* byteBufferOut = nullptr, bool doAssertions = true)",
			"u8 MultiplyColorChannelR32(u8 left, r32 rightR32)",
			"u8 MultiplyColorChannelU8(u8 left, u8 right)",
			"u8 NumDaysInMonth(Month_t month, bool isLeapYear)",
			"u8 NumDecimalDigitsU32(u32 number)",
			"u8 NumDecimalDigitsU64(u64 number)",
			"u8 OffsetToAlign(const void* memoryPntr, AllocAlignment_t alignment)",
			"u8 SimplexHash(i32 input)",
			"u8 StartPerfTime()",
			"u8* FifoUnwrap(const Fifo_t* fifo, MemArena_t* memArena, bool addNullTerm = false)",
			"v2 BezierCurve3(v2 start, v2 control, v2 end, r32 time)",
			"v2 BezierCurve4(v2 start, v2 control1, v2 control2, v2 end, r32 time)",
			"v2 ClosestPointOnLine(v2 lineStart, v2 lineEnd, v2 point)",
			"v2 EllipseArcCurve(v2 center, v2 radius, r32 axisAngle, r32 startAngle, r32 angleDelta, r32 time)",
			"v2 EllipseArcCurveStartEnd(v2 start, v2 radius, r32 axisAngle, u8 arcFlags, v2 end, r32 time)",
			"v2 GetBlueNoisePosInRec(u64 seed, rec bounds, u64 numOfPositions, u64 index)",
			"v2 GetHexagonVertex(Hexagon_t hexagon, u64 index)",
			"v2 GetObb2DBottomLeft(obb2 boundingBox)",
			"v2 GetObb2DBottomRight(obb2 boundingBox)",
			"v2 GetObb2DDownVec(obb2 boundingBox)",
			"v2 GetObb2DLeftVec(obb2 boundingBox)",
			"v2 GetObb2DRelativePos(obb2 boundingBox, v2 point)",
			"v2 GetObb2DRightVec(obb2 boundingBox)",
			"v2 GetObb2DTopLeft(obb2 boundingBox)",
			"v2 GetObb2DTopRight(obb2 boundingBox)",
			"v2 GetObb2DUpVec(obb2 boundingBox)",
			"v2 GetObb2DWorldPoint(obb2 boundingBox, v2 relativeOffset)",
			"v2 GetPointOnBezierPathPart(v2 currentPos, const BezierPathPart_t* part, r32 time)",
			"v2 Mat4MultiplyVec2(mat4 matrix, v2 vector, bool includeTranslation = true)",
			"v2 ParametricLine(v2 start, v2 end, r32 time)",
			"v2 PentagonGetDrawCenter(Pentagon_t pentagon)",
			"v2 PentagonGetEdgeCenter(Pentagon_t pentagon, u64 index)",
			"v2 PentagonGetVertex(Pentagon_t pentagon, u64 index)",
			"v2 ToVec2(v2i vector)",
			"v2 Vec2Abs(v2 vector)",
			"v2 Vec2Add(v2 left, v2 right)",
			"v2 Vec2Ceil(v2 vector)",
			"v2 Vec2Clamp(v2 vector, v2 min, v2 max)",
			"v2 Vec2Divide(v2 left, v2 right)",
			"v2 Vec2Fill(r32 value)",
			"v2 Vec2Floor(v2 vector)",
			"v2 Vec2FromAngle(r32 angle, r32 radius = 1.0f)",
			"v2 Vec2Lerp(v2 start, v2 end, r32 amount)",
			"v2 Vec2Max(v2 left, v2 right)",
			"v2 Vec2Min(v2 left, v2 right)",
			"v2 Vec2Multiply(v2 left, v2 right)",
			"v2 Vec2Normalize(v2 vector)",
			"v2 Vec2PerpLeft(v2 vector)",
			"v2 Vec2PerpRight(v2 vector)",
			"v2 Vec2Rotate(v2 vector, r32 angle)",
			"v2 Vec2Round(v2 vector)",
			"v2 Vec2Scale(v2 vector, r32 scalar)",
			"v2 Vec2Shrink(v2 vector, r32 divisor)",
			"v2 Vec2Subtract(v2 left, v2 right)",
			"v2 Vec2iNormalize(v2i vector)",
			"v2i GetBitmapSize(LCDBitmap* bitmap)",
			"v2i MeasureText(LCDFont* font, MyStr_t text, i32 tracking = 0)",
			"v2i PdSetRenderOffset(v2i offset)",
			"v2i Vec2Ceili(v2 vector)",
			"v2i Vec2Floori(v2 vector)",
			"v2i Vec2Roundi(v2 vector)",
			"v2i Vec2iAbs(v2i vector)",
			"v2i Vec2iAdd(v2i left, v2i right)",
			"v2i Vec2iClamp(v2i vector, v2i min, v2i max)",
			"v2i Vec2iFill(i32 value)",
			"v2i Vec2iMax(v2i left, v2i right)",
			"v2i Vec2iMin(v2i left, v2i right)",
			"v2i Vec2iMultiply(v2i left, v2i right)",
			"v2i Vec2iPerpLeft(v2i vector)",
			"v2i Vec2iPerpRight(v2i vector)",
			"v2i Vec2iScale(v2i vector, i32 scalar)",
			"v2i Vec2iSubtract(v2i left, v2i right)",
			"v3 ApplyBasis(Basis_t toBasis, v3 vector)",
			"v3 ChangeBasis(Basis_t fromBasis, Basis_t toBasis, v3 vector)",
			"v3 DodecGetVertex(Dodec_t dodec, u64 index)",
			"v3 Mat4MultiplyRightVec3(v3 vector, mat4 matrix, r32* wOut = nullptr)",
			"v3 Mat4MultiplyVec3(mat4 matrix, v3 vector, bool includeTranslation = true, r32* wOut = nullptr)",
			"v3 QuatGetAxis(const quat& quaternion)",
			"v3 QuatGetAxisVec(quat quaternion, Axis_t axis)",
			"v3 QuatGetForwardVec(quat quaternion)",
			"v3 QuatGetRightVec(quat quaternion)",
			"v3 QuatGetUpVec(quat quaternion)",
			"v3 RemoveBasis(Basis_t fromBasis, v3 vector)",
			"v3 ToVec3(v3i vector)",
			"v3 Vec3Abs(v3 vector)",
			"v3 Vec3Add(v3 left, v3 right)",
			"v3 Vec3Ceil(v3 vector)",
			"v3 Vec3Clamp(v3 vector, v3 min, v3 max)",
			"v3 Vec3Cross(v3 left, v3 right)",
			"v3 Vec3Divide(v3 left, v3 right)",
			"v3 Vec3Fill(r32 value)",
			"v3 Vec3Floor(v3 vector)",
			"v3 Vec3From2Angles(r32 facingDirection, r32 rotationUpDown, r32 radius = 1.0f)",
			"v3 Vec3FromVec2(v2 vector, r32 z)",
			"v3 Vec3Lerp(v3 start, v3 end, r32 amount)",
			"v3 Vec3Max(v3 left, v3 right)",
			"v3 Vec3Min(v3 left, v3 right)",
			"v3 Vec3Multiply(v3 left, v3 right)",
			"v3 Vec3Normalize(v3 vector)",
			"v3 Vec3Round(v3 vector)",
			"v3 Vec3Scale(v3 vector, r32 scalar)",
			"v3 Vec3Shrink(v3 vector, r32 divisor)",
			"v3 Vec3Subtract(v3 left, v3 right)",
			"v3 Vec3iNormalize(v3i vector)",
			"v3i Vec3Ceili(v3 vector)",
			"v3i Vec3Floori(v3 vector)",
			"v3i Vec3Roundi(v3 vector)",
			"v3i Vec3iAbs(v3i vector)",
			"v3i Vec3iAdd(v3i left, v3i right)",
			"v3i Vec3iClamp(v3i vector, v3i min, v3i max)",
			"v3i Vec3iCross(v3i left, v3i right)",
			"v3i Vec3iFill(i32 value)",
			"v3i Vec3iFromVec2i(v2i vector, i32 z)",
			"v3i Vec3iMax(v3i left, v3i right)",
			"v3i Vec3iMin(v3i left, v3i right)",
			"v3i Vec3iMultiply(v3i left, v3i right)",
			"v3i Vec3iScale(v3i vector, i32 scalar)",
			"v3i Vec3iSubtract(v3i left, v3i right)",
			"v4 Mat4MultiplyVec4(mat4 matrix, v4 vector)",
			"v4 ToVec4(v4i vector)",
			"v4 Vec4Abs(v4 vector)",
			"v4 Vec4Add(v4 left, v4 right)",
			"v4 Vec4Ceil(v4 vector)",
			"v4 Vec4Clamp(v4 vector, v4 min, v4 max)",
			"v4 Vec4Divide(v4 left, v4 right)",
			"v4 Vec4Fill(r32 value)",
			"v4 Vec4Floor(v4 vector)",
			"v4 Vec4FromVec3(v3 vector, r32 w)",
			"v4 Vec4Lerp(v4 start, v4 end, r32 amount)",
			"v4 Vec4Max(v4 left, v4 right)",
			"v4 Vec4Min(v4 left, v4 right)",
			"v4 Vec4Multiply(v4 left, v4 right)",
			"v4 Vec4Normalize(v4 vector)",
			"v4 Vec4Round(v4 vector)",
			"v4 Vec4Scale(v4 vector, r32 scalar)",
			"v4 Vec4Shrink(v4 vector, r32 divisor)",
			"v4 Vec4Subtract(v4 left, v4 right)",
			"v4 Vec4iNormalize(v4i vector)",
			"v4i Vec4Ceili(v4 vector)",
			"v4i Vec4Floori(v4 vector)",
			"v4i Vec4Roundi(v4 vector)",
			"v4i Vec4iAbs(v4i vector)",
			"v4i Vec4iAdd(v4i left, v4i right)",
			"v4i Vec4iClamp(v4i vector, v4i min, v4i max)",
			"v4i Vec4iFill(i32 value)",
			"v4i Vec4iFromVec3i(v3i vector, i32 w)",
			"v4i Vec4iMax(v4i left, v4i right)",
			"v4i Vec4iMin(v4i left, v4i right)",
			"v4i Vec4iMultiply(v4i left, v4i right)",
			"v4i Vec4iScale(v4i vector, i32 scalar)",
			"v4i Vec4iSubtract(v4i left, v4i right)",
			"void APP_STATE_RENDER_DEFINITION(bool isOnTop)",
			"void APP_STATE_START_DEFINITION(bool initialize, AppState_t prevState, MyStr_t infoStr)",
			"void APP_STATE_STOP_DEFINITION(bool deinitialize, AppState_t nextState)",
			"void APP_STATE_UPDATE_DEFINITION()",
			"void AppDebugOutput(u8 flags, const char* filePath, u64 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* message)",
			"void AppDebugPrint(u8 flags, const char* filePath, u64 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* formatString, ...)",
			"void BinSer_WriteValue_(void* result, u64 resultSize, u64* byteIndexPntr, u64 valueSize, const void* valuePntr)",
			"void BktArrayClear(BktArray_t* array, bool reduceToSingleBucket = false)",
			"void BktArrayExpand(BktArray_t* array, u64 numNewItemsRequired)",
			"void BktArrayMoveEmptyBucketToEnd(BktArray_t* array, u64 bucketIndex)",
			"void BktArrayRefreshLastUsedBucket(BktArray_t* array)",
			"void BktArrayRemoveAt(BktArray_t* array, u64 index)",
			"void BktArrayRemoveLast(BktArray_t* array)",
			"void BktArraySolidify(BktArray_t* array, bool deallocateEmptyBuckets = false, bool singleBucket = false)",
			"void BktArraySort(BktArray_t* array, CompareFunc_f* compareFunc, void* contextPntr)",
			"void BufferedSocketBufferPop(BufferedSocketBuffer_t* buffer, u64 numBytesToPop)",
			"void ChangeAppState(AppState_t newAppState, MyStr_t transitionStr = MyStr_Empty, bool stayInitialized = false)",
			"void ClearAppStateStackBeforeClose()",
			"void ClearMemArena(MemArena_t* arena)",
			"void CloseOpenSocket(OpenSocket_t* socket)",
			"void ConvertTimestampToRealTime(u64 timestamp, RealTime_t* realTimeOut, bool applyDst = true)",
			"void CopyStringFifo(StringFifo_t* destFifo, const StringFifo_t* srcFifo, MemArena_t* memArena, bool shrinkBufferToMatchContents)",
			"void CreateBezierPath(BezierPath_t* pathOut, MemArena_t* memArena, u64 numPartsExpected = 0)",
			"void CreateBktArray(BktArray_t* array, MemArena_t* memArena, u64 itemSize, u64 minBucketSize = 64, u64 initialSizeRequirement = 0)",
			"void CreateFifo(Fifo_t* fifo, MemArena_t* memArena, u64 size, FifoType_t type)",
			"void CreateNetworkBus(NetworkBus_t* busOut, BufferedSocket_t* socket, MemArena_t* memArena, MemArena_t* tempArena)",
			"void CreateProcessLog(ProcessLog_t* logOut, u64 fifoSize, MemArena_t* fifoArena, MemArena_t* logArena)",
			"void CreateProcessLogStub(ProcessLog_t* logOut)",
			"void CreateRandomSeries(RandomSeries_t* series, RandomSeriesType_t type = RandomSeriesType_LinearCongruential64, u64 defaultIncrement = 1)",
			"void CreateStrHashDict(StrHashDict_t* dict, MemArena_t* memArena, u64 itemSize, u64 initialRequiredCapacity = 0)",
			"void CreateStringFifo(StringFifo_t* fifo, u64 bufferSize, u8* bufferPntr)",
			"void CreateStringFifoInArena(StringFifo_t* fifo, MemArena_t* memArena, u64 bufferSize)",
			"void CreateVarArray(VarArray_t* array, MemArena_t* memArena, u64 itemSize, u64 initialRequiredCapacity = 0, bool exponentialChunkSize = true, u64 allocChunkSize = 8)",
			"void CreateWordTree(WordTree_t* tree, MemArena_t* memArena, u64 initialRequiredCapacity = 0, bool exponentialChunkSize = true, u64 allocChunkSize = 8)",
			"void DebugToggledCallback(void* userData)",
			"void DestroyBufferedSocket(BufferedSocket_t* socket)",
			"void DestroyStringFifo(StringFifo_t* fifo)",
			"void DumpProcessLog(const ProcessLog_t* log, const char* headerAndFooterStr = nullptr, DbgLevel_t minLevel = DbgLevel_Debug)",
			"void FpsToggledCallback(void* userData)",
			"void FreeBezierPath(BezierPath_t* path)",
			"void FreeBktArray(BktArray_t* array)",
			"void FreeBufferedSocketBuffer(BufferedSocket_t* socket, BufferedSocketBuffer_t* buffer)",
			"void FreeFifo(Fifo_t* fifo)",
			"void FreeFilesInDir(FilesInDir_t* files)",
			"void FreeLinkedList(LinkedList_t* list)",
			"void FreeMemArena(MemArena_t* arena)",
			"void FreeNetworkBus(NetworkBus_t* bus)",
			"void FreePrimitiveIndexedVerts(PrimitiveIndexedVerts_t* indexedVerts)",
			"void FreeProcessLog(ProcessLog_t* log)",
			"void FreeResourceManifest(ResourceManifest_t* manifest)",
			"void FreeResourceManifestEntry(ResourceManifest_t* manifest, ResourceManifestEntry_t* entry)",
			"void FreeRetryPacket(NetworkBus_t* bus, RetryPacket_t* packet)",
			"void FreeStrHashDict(StrHashDict_t* dict)",
			"void FreeStringBuilder(StringBuilder_t* builder)",
			"void FreeThreadLocalScratchArenas()",
			"void FreeVarArray(VarArray_t* array)",
			"void FreeWordTree(WordTree_t* tree)",
			"void FreeXmlParser(XmlParser_t* parser)",
			"void GameMainMenuSelectedCallback(void* userPntr)",
			"void GameUiLayout()",
			"void GenerateBezierPathForCircle(MemArena_t* arena, v2 center, r32 radius, BezierPath_t* pathOut)",
			"void GenerateBezierPathForObb2(MemArena_t* arena, obb2 boundingBox, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRectangle(MemArena_t* arena, rec rectangle, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRoundedObb2(MemArena_t* arena, obb2 boundingBox, r32 cornerRadius, BezierPath_t* pathOut)",
			"void GenerateBezierPathForRoundedRectangle(MemArena_t* arena, rec rectangle, r32 cornerRadius, BezierPath_t* pathOut)",
			"void GrowMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize, const GrowMemToken_t* token)",
			"void GyLibAssertFailure(const char* filePath, int lineNumber, const char* funcName, const char* expressionStr, const char* messageStr)",
			"void GyLibOutputHandler(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* message)",
			"void GyLibPrintHandler(const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t level, bool newLine, const char* formatString, ...)",
			"void HandleSystemEvent(PDSystemEvent event, uint32_t arg)",
			"void InitMemArena_Alias(MemArena_t* arena, MemArena_t* sourceArena)",
			"void InitMemArena_Buffer(MemArena_t* arena, u64 bufferSize, void* bufferPntr, bool singleAlloc = false, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_FixedHeap(MemArena_t* arena, u64 size, void* memoryPntr, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_MarkedStack(MemArena_t* arena, u64 size, void* memoryPntr, u64 maxNumMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapArena(MemArena_t* arena, u64 pageSize, MemArena_t* sourceArena, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_PagedHeapFuncs(MemArena_t* arena, u64 pageSize, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc, u64 maxNumPages = 0, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitMemArena_Redirect(MemArena_t* arena, AllocationFunction_f* allocFunc, FreeFunction_f* freeFunc)",
			"void InitMemArena_StdHeap(MemArena_t* arena)",
			"void InitPerfGraph(PerfGraph_t* graph)",
			"void InitSoundPool(SoundPool_t* pool)",
			"void InitStringBuffer(StringBuffer_t* stringBufferPntr, MyStr_t initialValue = \"\")",
			"void InitThreadLocalScratchArenasPaged(MemArena_t* sourceArena, u64 scratchPageSize, u64 scratchMaxMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitThreadLocalScratchArenasVirtual(u64 maxVirtualSize, u64 scratchMaxMarks, AllocAlignment_t alignment = AllocAlignment_None)",
			"void InitializeAppInput()",
			"void InvertPrimitiveVerts(PrimitiveIndexedVerts_t* indexedVerts)",
			"void JoinedSerializableAppend(Serializable_t* joinedSerializable, Serializable_t newSerializable)",
			"void ListFilesCallback(const char* pathNullTerm, void* userdata)",
			"void LogExit_(ProcessLog_t* log, bool success, u32 errorCode, const char* filePath, u32 lineNumber, const char* funcName)",
			"void LogOutput_(ProcessLog_t* log, u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* message)",
			"void LogPrint_(ProcessLog_t* log, u8 flags, const char* filePath, u32 lineNumber, const char* funcName, DbgLevel_t dbgLevel, bool addNewLine, const char* formatString, ...)",
			"void MicroDelay(unsigned int milliseconds)",
			"void NB_CLIENT_CONNECTED_OR_DISCONNECTED_DEFINITION(struct NetworkBus_t* bus, struct NetworkBusClient_t* client, bool connected)",
			"void NB_RETRY_PACKET_FINISHED_DEFINITION(struct NetworkBus_t* bus, struct RetryPacket_t* packet, bool success, struct NetworkCmdHeader_t rspHeader, const u8* rspPayloadPntr)",
			"void NetworkBusChangeState(NetworkBus_t* bus, NetworkBusState_t newState)",
			"void NetworkBusFinishRetryPacket(NetworkBus_t* bus, RetryPacket_t* retryPacket, u64 retryPacketIndex, bool success, NetworkCmdHeader_t header, u8* payloadPntr)",
			"void NetworkBusHandleCmd(NetworkBus_t* bus, BufferedSocketBuffer_t* buffer, NetworkCmdHeader_t header, u8* payloadPntr)",
			"void NetworkBusSetCallbacks(NetworkBus_t* bus, void* contextPntr, NbGetProgramTime_f* getProgramTimeFunc, NbHandleCommand_f* handleCommandFunc, NbResponseCheck_f* responseCheckFunc, NbRetryPacketFinished_f* retryPacketFinishedFunc, NbClientConnectedOrDisconnected_f* clientConnectedOrDisconnectedFunc)",
			"void NetworkBusStartConnection(NetworkBus_t* bus)",
			"void NetworkUpdateConnectionProcess(NetworkBus_t* bus, u64 programTime)",
			"void NewStringBuilder(StringBuilder_t* builder, MemArena_t* memArena, u64 initialRequiredCapacity = 0)",
			"void OffscreenRenderingBeginFrame()",
			"void OsCommitReservedMemory(void* memoryPntr, u64 numBytes)",
			"void OsFreeReservedMemory(void* memoryPntr, u64 reservedSize)",
			"void PdBeginFrame()",
			"void PdDrawLine(v2i start, v2i end, i32 width, LCDColor color = kColorBlack)",
			"void PdDrawOffscreenResults(OffscreenTarget_t target, reci drawRec, Dir2_t rotation = Dir2_Right)",
			"void PdDrawRec(reci drawRec, LCDColor color = kColorBlack)",
			"void PdDrawRecOutline(reci drawRec, i32 thickness, bool outside = false, LCDColor color = kColorBlack)",
			"void PdDrawRecOutlineArc(reci rectangle, i32 thickness, r32 startPercent, r32 endPercent, LCDColor color)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, reci drawRec)",
			"void PdDrawSheetFrame(SpriteSheet_t sheet, v2i frame, v2i position)",
			"void PdDrawText(MyStr_t text, v2i position)",
			"void PdDrawText(const char* textNullTerm, v2i position)",
			"void PdDrawTextPrint(v2i position, const char* formatString, ...)",
			"void PdDrawTexturedObb(LCDBitmap* bitmap, v2i bitmapSize, obb2 drawObb)",
			"void PdDrawTexturedObb(Texture_t texture, obb2 drawObb)",
			"void PdDrawTexturedRec(LCDBitmap* bitmap, v2i bitmapSize, reci drawRec)",
			"void PdDrawTexturedRec(Texture_t texture, reci drawRec)",
			"void PdDrawTexturedRecPart(Texture_t texture, reci drawRec, reci sourceRec, Dir2_t rotation = Dir2_Right)",
			"void PdPopOffscreenTarget(OffscreenTarget_t target)",
			"void PdPushOffscreenTarget(OffscreenTarget_t target)",
			"void PopAppState(MyStr_t transitionStr = MyStr_Empty, bool stayInitialized = false)",
			"void PopCmdInBuffer(BufferedSocketBuffer_t* buffer, NetworkCmdHeader_t* header, u8* payloadPntr)",
			"void PopMemMark(MemArena_t* arena, u64 mark = 0xFFFFFFFFFFFFFFFFULL)",
			"void PostRenderGame()",
			"void PostUpdateGame()",
			"void PreRenderGame()",
			"void PreUpdateGame()",
			"void PrintVa_Print(const char* formatString, va_list args, char* allocatedSpace, int previousResult)",
			"void ProcessLogRouteToDebugOutput(ProcessLog_t* log, GyLibDebugOutput_f* outputFuncPntr)",
			"void PushAppState(AppState_t newAppState, MyStr_t transitionStr = MyStr_Empty_Const)",
			"void QuickSort(void* arrayPntr, u64 numElements, u64 elementSize, void* workingSpace, CompareFunc_f* compareFunc, void* contextPntr)",
			"void QuickSortAlloc(void* arrayPntr, u64 numElements, u64 elementSize, MemArena_t* workingAllocArena, CompareFunc_f* compareFunc, void* contextPntr = nullptr)",
			"void RangeFix(Range_t* range)",
			"void RangeiFix(Rangei_t* range)",
			"void RecAlign(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignSize(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecAlignTopLeft(rec* rectangleOut, r32 alignmentScale = 1.0f)",
			"void RecLayoutBetweenX(rec* rectangleOut, r32 leftSide, r32 rightSide, r32 leftMargin = 0, r32 rightMargin = 0, r32 minWidth = 0)",
			"void RecLayoutBetweenY(rec* rectangleOut, r32 topSide, r32 bottomSide, r32 topMargin = 0, r32 bottomMargin = 0, r32 minHeight = 0)",
			"void RecLayoutBottomOf(rec* rectangleOut, r32 posOfThingUpwards, r32 topPadding = 0.0f)",
			"void RecLayoutBottomPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutHorizontalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void RecLayoutLeftOf(rec* rectangleOut, r32 posOfThingToRight, r32 rightPadding = 0.0f)",
			"void RecLayoutLeftPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutRightOf(rec* rectangleOut, r32 posOfThingToLeft, r32 leftPadding = 0.0f)",
			"void RecLayoutRightPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionWidth, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutTopOf(rec* rectangleOut, r32 posOfThingDownwards, r32 bottomPadding = 0.0f)",
			"void RecLayoutTopPortionOf(rec* rectangleOut, rec* otherRectangle, r32 portionHeight, bool shrinkOtherRec = false, r32 offsetAmount = 0)",
			"void RecLayoutVerticalCenter(rec* rectangleOut, rec otherRectangle, r32 percentage = 0.5f)",
			"void ReduceRatioU32(u32* num1, u32* num2)",
			"void ReduceRatioU64(u64* num1, u64* num2)",
			"void RegisterAppState_Game()",
			"void RegisterAppState_MainMenu()",
			"void RenderAppState(AppState_t appState, bool isOnTop)",
			"void RenderAppStateStack()",
			"void RenderAppState_Game(bool isOnTop)",
			"void RenderAppState_MainMenu(bool isOnTop)",
			"void RenderPerfGraph(PerfGraph_t* graph)",
			"void SeedRandomSeriesU128(RandomSeries_t* series, u64 seed1, u64 seed2)",
			"void SeedRandomSeriesU32(RandomSeries_t* series, u32 seed)",
			"void SeedRandomSeriesU64(RandomSeries_t* series, u64 seed)",
			"void SetProcessLogFilePath(ProcessLog_t* log, MyStr_t filePath)",
			"void SetProcessLogName(ProcessLog_t* log, MyStr_t processName)",
			"void ShrinkMem(MemArena_t* arena, const void* prevAllocPntr, u64 prevAllocSize, u64 newAllocSize)",
			"void SplitFilePath(MyStr_t fullPath, MyStr_t* directoryOut, MyStr_t* fileNameOut, MyStr_t* extensionOut = nullptr)",
			"void SplitUrlHostAndPath(MyStr_t* fullUrl, MyStr_t* hostNameOut = nullptr, MyStr_t* pathNameOut = nullptr)",
			"void StartAppState(AppState_t appState, bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_Game(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartAppState_MainMenu(bool initialize, AppState_t prevState, MyStr_t transitionStr)",
			"void StartFirstAppState(AppState_t appState)",
			"void StartSoundInstance(SoundInstance_t* instance, r32 volume = 1.0f, int repeatCount = 1, r32 rate = 1.0f)",
			"void StepRandomSeries(RandomSeries_t* series, u64 numberOfSteps = 1)",
			"void StopAppState(AppState_t appState, bool deinitialize, AppState_t nextState)",
			"void StopAppState_Game(bool deinitialize, AppState_t nextState)",
			"void StopAppState_MainMenu(bool deinitialize, AppState_t nextState)",
			"void StrReallocAppend(MyStr_t* baseStr, MyStr_t appendStr, MemArena_t* memArena)",
			"void StrSpliceInPlace(MyStr_t target, u64 startIndex, MyStr_t replacement)",
			"void StringBufferAppend(StringBufferGeneric_t* stringBuffer, MyStr_t str)",
			"void StringBufferAppendPrint(StringBufferGeneric_t* stringBuffer, const char* formatString, ...)",
			"void StringBufferClear(StringBufferGeneric_t* stringBuffer, bool zeroMemory = false)",
			"void StringBufferPrint(StringBufferGeneric_t* stringBuffer, const char* formatString, ...)",
			"void StringBufferSet(StringBufferGeneric_t* stringBuffer, MyStr_t str)",
			"void StringBuilderAllocMoreMem(StringBuilder_t* builder, u64 spaceRequired)",
			"void StringBuilderAppend(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderAppendLine(StringBuilder_t* builder, const char* nullTermStr = \"\")",
			"void StringBuilderAppendPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintLine(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderAppendPrintVa(StringBuilder_t* builder, const char* formatString, va_list args1, va_list args2)",
			"void StringBuilderClear(StringBuilder_t* builder, bool deallocate = false)",
			"void StringBuilderPrint(StringBuilder_t* builder, const char* formatString, ...)",
			"void StringBuilderSet(StringBuilder_t* builder, MyStr_t str)",
			"void StringBuilderShrink(StringBuilder_t* builder, bool deallocateIfNoChars = true)",
			"void StringFifoAddBuildBuffer(StringFifo_t* fifo, u64 buildBufferSize, u8* buildSpace)",
			"void StringFifoAddBuildBufferInArena(StringFifo_t* fifo, u64 buildBufferSize, MemArena_t* memArena)",
			"void StringFifoBuild(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoBuildEx(StringFifo_t* fifo, MyStr_t text, u64 metaStructSize, const void* metaStructPntr, MyStr_t metaString)",
			"void StringFifoInsertLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, StringFifoPushLineSort_f* sortCallback, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void StringFifoPopLine(StringFifo_t* fifo)",
			"void StringFifoPushLinesFromFifo(StringFifo_t* fifo, const StringFifo_t* srcFifo, bool includeMetaStructs = true, bool includeMetaStrings = true, StringFifoPushLineBefore_f* beforeCallback = nullptr, StringFifoPushLineAfter_f* afterCallback = nullptr, void* userPntr = nullptr)",
			"void TwoPassPrint(char* resultPntr, u64 resultLength, u64* currentByteIndex, const char* formatString, ...)",
			"void UpdateAppInput()",
			"void UpdateAppInputBtnState(Btn_t btn, bool isDown)",
			"void UpdateAppState(AppState_t appState)",
			"void UpdateAppStateStack()",
			"void UpdateAppState_Game()",
			"void UpdateAppState_MainMenu()",
			"void UpdateBufferedSocket(BufferedSocket_t* socket, u64 programTime)",
			"void UpdateNetworkBus(NetworkBus_t* bus)",
			"void UpdatePerfGraph(PerfGraph_t* graph)",
			"void UpdateSoundInstance(SoundInstance_t* instance)",
			"void UpdateSoundPool(SoundPool_t* pool)",
			"void UuidToStr(const Uuid_t* uuid, char* buffer, bool addHyphens = true)",
			"void VarArrayAddVarArray(VarArray_t* destArray, const VarArray_t* sourceArray, u64 destIndex, u64 sourceIndex = 0, u64 sourceCount = UINT64_MAX)",
			"void VarArrayClear(VarArray_t* array, bool deallocate = false)",
			"void VarArrayCopy(VarArray_t* destArray, const VarArray_t* sourceArray, MemArena_t* memArena)",
			"void VarArrayName(VarArray_t* array, MyStr_t newName)",
			"void VarArraySort(VarArray_t* array, CompareFunc_f* compareFunc, void* contextPntr)",
			"void Vec2Align(v2* vectorOut, r32 alignmentScale = 1.0f)",
			"void Vec3Align(v3* vectorOut, r32 alignmentScale = 1.0f)",
			"void Vec4Align(v4* vectorOut, r32 alignmentScale = 1.0f)",
			"void* AllocMem(MemArena_t* arena, u64 numBytes, AllocAlignment_t alignOverride = AllocAlignment_None)",
			"void* BinSer_WriteStructure_(void* result, u64 resultSize, u64* byteIndexPntr, u64 structureSize)",
			"void* GetFifoLineMetaStruct_(StringFifoLine_t* line, u64 expectedStructSize)",
			"void* OsReserveMemory(u64 numBytes)",
			"void* ReallocMem(MemArena_t* arena, void* allocPntr, u64 newSize, u64 oldSize = 0, AllocAlignment_t alignOverride = AllocAlignment_None, bool ignoreNullptr = false, u64* oldSizeOut = nullptr)",
			"void* RegisterAppState(AppState_t state, u64 dataSize, AppStateStart_f* StartFunc, AppStateStop_f* StopFunc, AppStateUpdate_f* UpdateFunc, AppStateRender_f* RenderFunc, AppStateIsFull_f* IsFullFunc = nullptr)",
			"void* VarArrayMove(VarArray_t* array, u64 fromIndex, u64 toIndex, bool swapWithTarget = true)",
			"void* WordTreeGetPntr(WordTree_t* tree, MyStr_t word)",
		],
		"custom_globals":
		[
			"ColorIllumValues",
			"ElapsedMs",
			"FontRangeChars",
			"PrimeNumbersU32",
			"ProgramTime",
			"ScreenRec",
			"ScreenRecf",
			"ScreenSize",
			"ScreenSizef",
			"SzFuncs_BinaryCopy",
			"SzFuncs_JoinedSerializable",
			"SzFuncs_MyStr",
			"SzFuncs_VarArrayBinaryCopy",
			"TempArena",
			"ThreadLocalScratchArenas",
			"TimeScale",
			"blackDotTexture",
			"boundFont",
			"currentClipRec",
			"currentClipRecActive",
			"currentDrawMode",
			"currentOffscreenTarget",
			"fixedHeap",
			"game",
			"gl",
			"input",
			"logGlobals",
			"mainHeap",
			"mmenu",
			"nextPerfTimerIndex",
			"pd",
			"perfTimers",
			"pig",
			"renderOffset",
			"whiteDotTexture",
		],
		"custom_types":
		[
			"AllocAlignment_t",
			"AllocationFunction_f",
			"AppInput_t",
			"AppStateChangeType_t",
			"AppStateChange_t",
			"AppStateInfo_t",
			"AppStateIsFull_f",
			"AppStateRender_f",
			"AppStateStack_t",
			"AppStateStart_f",
			"AppStateStop_f",
			"AppStateUpdate_f",
			"AppState_t",
			"AsciiTree_t",
			"Basis_t",
			"Bezier3_t",
			"Bezier4_t",
			"BezierPathPartArcFlag_t",
			"BezierPathPartType_t",
			"BezierPathPart_t",
			"BezierPath_t",
			"BitmapData_t",
			"BktArrayBucket_t",
			"BktArray_t",
			"BoolFunc_f",
			"Box_t",
			"Boxi_t",
			"BtnState_t",
			"Btn_t",
			"BufferedSocketBufferType_t",
			"BufferedSocketBuffer_t",
			"BufferedSocket_t",
			"Circle_t",
			"ColorHSV_t",
			"ColorIlluminant_t",
			"ColorLAB_t",
			"ColorLCH_t",
			"ColorObserver_t",
			"ColorXYZ_t",
			"Color_t",
			"Colorf_t",
			"CompareFunc_f",
			"Cone_t",
			"CyclicFunc2DCallback_f",
			"CyclicFunc2D_t",
			"CyclicFuncCallback_f",
			"CyclicFuncType_t",
			"CyclicFunc_t",
			"Cylinder_t",
			"DayOfWeek_t",
			"DbgFlags_t",
			"DbgLevel_t",
			"DeserializeFunc_f",
			"Dodecahedron_t",
			"EasingStyle_t",
			"FifoType_t",
			"Fifo_t",
			"FilesInDirContext_t",
			"FilesInDir_t",
			"FontRange_t",
			"Font_t",
			"FreeFunction_f",
			"Frustum_t",
			"GameGlobals_t",
			"GameState_t",
			"GetPreciseProgramTime_f",
			"GetThreadNumber_f",
			"GyLibDebugOutput_f",
			"GyLibDebugPrint_f",
			"HeapAllocPrefix_t",
			"HeapPageHeader_t",
			"Hexagon_t",
			"I32Func_f",
			"InDblLinkedList_t",
			"InLinkedList_t",
			"IpAddress4_t",
			"IpAddress6_t",
			"IpAddressAndPort_t",
			"IpAddress_t",
			"IpPort_t",
			"Ipv4Part_t",
			"Ipv6Part_t",
			"JoinedSerializableContext_t",
			"LineParser_t",
			"LinkedListNode_t",
			"LinkedList_t",
			"LogGlobals_t",
			"MainMenuState_t",
			"MarkedStackArenaHeader_t",
			"Matrix4x4_t",
			"MemArenaType_t",
			"MemArena_t",
			"Month_t",
			"MyStr_t",
			"MyWideStr_t",
			"NbClientConnectedOrDisconnected_f",
			"NbGetProgramTime_f",
			"NbHandleCommand_f",
			"NbPacketHandleFlags_t",
			"NbResponseCheck_f",
			"NbRetryPacketFinished_f",
			"NetworkBusCallbacks_t",
			"NetworkBusClient_t",
			"NetworkBusCmd_t",
			"NetworkBusStandardPayload_t",
			"NetworkBusState_t",
			"NetworkBus_t",
			"NetworkCmdHeader_t",
			"Obb2D_t",
			"OffscreenBitmap_t",
			"OffscreenRenderState_t",
			"OffscreenTarget_t",
			"OpenSocket_t",
			"OsError_t",
			"ParsingTokenType_t",
			"ParsingToken_t",
			"Pentagon_t",
			"PerfGraph_t",
			"PigEngineState_t",
			"Plane_t",
			"PrimitiveIndex3D_t",
			"PrimitiveIndexedVerts_t",
			"PrimitiveVert3D_t",
			"ProcessLogLine_t",
			"ProcessLog_t",
			"Pyramid_t",
			"Quaternion_t",
			"RandomSeriesType_t",
			"RandomSeries_t",
			"Range_t",
			"Ray2_t",
			"Ray3_t",
			"RayVsBoxResult_t",
			"RayVsObb2DResult_t",
			"RayVsRectangle2DResult_t",
			"RealTime_t",
			"Rectangle_t",
			"Rectanglei_t",
			"ResourceManifestEntry_t",
			"ResourceManifest_t",
			"ResponseCheckResult_t",
			"RetryPacket_t",
			"SerializableFuncs_t",
			"Serializable_t",
			"SerializeFunc_f",
			"Simplex_t",
			"SocketError_t",
			"SocketProtocol_t",
			"SocketType_t",
			"SocketWarning_t",
			"SoundInstance_t",
			"SoundPool_t",
			"Sound_t",
			"Sphere_t",
			"SpriteSheet_t",
			"StrHashDictItem_t",
			"StrHashDictIter_t",
			"StrHashDict_t",
			"StringBufferGeneric_t",
			"StringBuffer_t",
			"StringBuilder_t",
			"StringFifoLine_t",
			"StringFifoPushLineAfter_f",
			"StringFifoPushLineBefore_f",
			"StringFifoPushLineSort_f",
			"StringFifo_t",
			"TempString_t",
			"TextParser_t",
			"Texture_t",
			"TimeUnit_t",
			"Triangle2D_t",
			"Triangle3D_t",
			"TriangulatePart_t",
			"TriangulateResult_t",
			"TriangulateVert_t",
			"TryDeserResourceManifestError_t",
			"TryParseFailureReason_t",
			"Uuid_t",
			"VarArray_t",
			"Vector2_t",
			"Vector2i_t",
			"Vector3_t",
			"Vector3i_t",
			"Vector4_t",
			"Vector4i_t",
			"VoidFunc_f",
			"Wedge_t",
			"WordBreakCharClass_t",
			"WordTreeLeaf_t",
			"WordTreeNode_t",
			"WordTree_t",
			"XmlParseResultType_t",
			"XmlParseResult_t",
			"XmlParser_t",
			"XmlParsingError_t",
			"XmlProperty_t",
			"XmlToken_t",
			"box",
			"boxi",
			"mat4",
			"obb2",
			"obb3",
			"quat",
			"rec",
			"reci",
			"v2",
			"v2i",
			"v3",
			"v3i",
			"v4",
			"v4i",
		],
	},
}
